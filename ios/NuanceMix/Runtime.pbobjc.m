// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: runtime.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Runtime.pbobjc.h"
#import "Result.pbobjc.h"
#import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(InterpretResult);
GPBObjCClassDeclaration(NLUInterpretRequest);
GPBObjCClassDeclaration(NLUInterpretResponse);
GPBObjCClassDeclaration(NLUInterpretationInput);
GPBObjCClassDeclaration(NLUInterpretationParameters);
GPBObjCClassDeclaration(NLUInterpretationResource);
GPBObjCClassDeclaration(NLUResourceReference);
GPBObjCClassDeclaration(NLUStatus);

#pragma mark - NLURuntimeRoot

@implementation NLURuntimeRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    registry = [[GPBExtensionRegistry alloc] init];
    // Merge in the imports (direct or indirect) that defined extensions.
    [registry addExtensions:[GAPIAnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - NLURuntimeRoot_FileDescriptor

static GPBFileDescriptor *NLURuntimeRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"nuance.nlu.v1"
                                                 objcPrefix:@"NLU"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum NLUEnumInterpretationResultType

GPBEnumDescriptor *NLUEnumInterpretationResultType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Undefined\000SingleIntent\000MultiIntent\000";
    static const int32_t values[] = {
        NLUEnumInterpretationResultType_Undefined,
        NLUEnumInterpretationResultType_SingleIntent,
        NLUEnumInterpretationResultType_MultiIntent,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(NLUEnumInterpretationResultType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:NLUEnumInterpretationResultType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL NLUEnumInterpretationResultType_IsValidValue(int32_t value__) {
  switch (value__) {
    case NLUEnumInterpretationResultType_Undefined:
    case NLUEnumInterpretationResultType_SingleIntent:
    case NLUEnumInterpretationResultType_MultiIntent:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum NLUEnumInterpretationInputLoggingMode

GPBEnumDescriptor *NLUEnumInterpretationInputLoggingMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Plaintext\000Suppressed\000";
    static const int32_t values[] = {
        NLUEnumInterpretationInputLoggingMode_Plaintext,
        NLUEnumInterpretationInputLoggingMode_Suppressed,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(NLUEnumInterpretationInputLoggingMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:NLUEnumInterpretationInputLoggingMode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL NLUEnumInterpretationInputLoggingMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case NLUEnumInterpretationInputLoggingMode_Plaintext:
    case NLUEnumInterpretationInputLoggingMode_Suppressed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum NLUEnumResourceType

GPBEnumDescriptor *NLUEnumResourceType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UndefinedResourceType\000SemanticModel\000Word"
        "set\000CompiledWordset\000";
    static const int32_t values[] = {
        NLUEnumResourceType_UndefinedResourceType,
        NLUEnumResourceType_SemanticModel,
        NLUEnumResourceType_Wordset,
        NLUEnumResourceType_CompiledWordset,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(NLUEnumResourceType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:NLUEnumResourceType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL NLUEnumResourceType_IsValidValue(int32_t value__) {
  switch (value__) {
    case NLUEnumResourceType_UndefinedResourceType:
    case NLUEnumResourceType_SemanticModel:
    case NLUEnumResourceType_Wordset:
    case NLUEnumResourceType_CompiledWordset:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - NLUInterpretRequest

@implementation NLUInterpretRequest

@dynamic hasParameters, parameters;
@dynamic hasModel, model;
@dynamic resourcesArray, resourcesArray_Count;
@dynamic clientData, clientData_Count;
@dynamic userId;
@dynamic hasInput, input;

typedef struct NLUInterpretRequest__storage_ {
  uint32_t _has_storage_[1];
  NLUInterpretationParameters *parameters;
  NLUResourceReference *model;
  NSMutableArray *resourcesArray;
  NSMutableDictionary *clientData;
  NSString *userId;
  NLUInterpretationInput *input;
} NLUInterpretRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parameters",
        .dataTypeSpecific.clazz = GPBObjCClass(NLUInterpretationParameters),
        .number = NLUInterpretRequest_FieldNumber_Parameters,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NLUInterpretRequest__storage_, parameters),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "model",
        .dataTypeSpecific.clazz = GPBObjCClass(NLUResourceReference),
        .number = NLUInterpretRequest_FieldNumber_Model,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NLUInterpretRequest__storage_, model),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resourcesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(NLUInterpretationResource),
        .number = NLUInterpretRequest_FieldNumber_ResourcesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NLUInterpretRequest__storage_, resourcesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientData",
        .dataTypeSpecific.clazz = Nil,
        .number = NLUInterpretRequest_FieldNumber_ClientData,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NLUInterpretRequest__storage_, clientData),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = NLUInterpretRequest_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NLUInterpretRequest__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "input",
        .dataTypeSpecific.clazz = GPBObjCClass(NLUInterpretationInput),
        .number = NLUInterpretRequest_FieldNumber_Input,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NLUInterpretRequest__storage_, input),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NLUInterpretRequest class]
                                     rootClass:[NLURuntimeRoot class]
                                          file:NLURuntimeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NLUInterpretRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NLUInterpretationParameters

@implementation NLUInterpretationParameters

@dynamic interpretationResultType;
@dynamic interpretationInputLoggingMode;
@dynamic postProcessingScriptParameters, postProcessingScriptParameters_Count;
@dynamic maxInterpretations;

typedef struct NLUInterpretationParameters__storage_ {
  uint32_t _has_storage_[1];
  NLUEnumInterpretationResultType interpretationResultType;
  NLUEnumInterpretationInputLoggingMode interpretationInputLoggingMode;
  uint32_t maxInterpretations;
  NSMutableDictionary *postProcessingScriptParameters;
} NLUInterpretationParameters__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "interpretationResultType",
        .dataTypeSpecific.enumDescFunc = NLUEnumInterpretationResultType_EnumDescriptor,
        .number = NLUInterpretationParameters_FieldNumber_InterpretationResultType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NLUInterpretationParameters__storage_, interpretationResultType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "interpretationInputLoggingMode",
        .dataTypeSpecific.enumDescFunc = NLUEnumInterpretationInputLoggingMode_EnumDescriptor,
        .number = NLUInterpretationParameters_FieldNumber_InterpretationInputLoggingMode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NLUInterpretationParameters__storage_, interpretationInputLoggingMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "postProcessingScriptParameters",
        .dataTypeSpecific.clazz = Nil,
        .number = NLUInterpretationParameters_FieldNumber_PostProcessingScriptParameters,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NLUInterpretationParameters__storage_, postProcessingScriptParameters),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maxInterpretations",
        .dataTypeSpecific.clazz = Nil,
        .number = NLUInterpretationParameters_FieldNumber_MaxInterpretations,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NLUInterpretationParameters__storage_, maxInterpretations),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NLUInterpretationParameters class]
                                     rootClass:[NLURuntimeRoot class]
                                          file:NLURuntimeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NLUInterpretationParameters__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t NLUInterpretationParameters_InterpretationResultType_RawValue(NLUInterpretationParameters *message) {
  GPBDescriptor *descriptor = [NLUInterpretationParameters descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NLUInterpretationParameters_FieldNumber_InterpretationResultType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetNLUInterpretationParameters_InterpretationResultType_RawValue(NLUInterpretationParameters *message, int32_t value) {
  GPBDescriptor *descriptor = [NLUInterpretationParameters descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NLUInterpretationParameters_FieldNumber_InterpretationResultType];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t NLUInterpretationParameters_InterpretationInputLoggingMode_RawValue(NLUInterpretationParameters *message) {
  GPBDescriptor *descriptor = [NLUInterpretationParameters descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NLUInterpretationParameters_FieldNumber_InterpretationInputLoggingMode];
  return GPBGetMessageRawEnumField(message, field);
}

void SetNLUInterpretationParameters_InterpretationInputLoggingMode_RawValue(NLUInterpretationParameters *message, int32_t value) {
  GPBDescriptor *descriptor = [NLUInterpretationParameters descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NLUInterpretationParameters_FieldNumber_InterpretationInputLoggingMode];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - NLUInterpretationResource

@implementation NLUInterpretationResource

@dynamic resourceUnionOneOfCase;
@dynamic externalReference;
@dynamic inlineWordset;

typedef struct NLUInterpretationResource__storage_ {
  uint32_t _has_storage_[2];
  NLUResourceReference *externalReference;
  NSString *inlineWordset;
} NLUInterpretationResource__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "externalReference",
        .dataTypeSpecific.clazz = GPBObjCClass(NLUResourceReference),
        .number = NLUInterpretationResource_FieldNumber_ExternalReference,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NLUInterpretationResource__storage_, externalReference),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inlineWordset",
        .dataTypeSpecific.clazz = Nil,
        .number = NLUInterpretationResource_FieldNumber_InlineWordset,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NLUInterpretationResource__storage_, inlineWordset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NLUInterpretationResource class]
                                     rootClass:[NLURuntimeRoot class]
                                          file:NLURuntimeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NLUInterpretationResource__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "resourceUnion",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void NLUInterpretationResource_ClearResourceUnionOneOfCase(NLUInterpretationResource *message) {
  GPBDescriptor *descriptor = [NLUInterpretationResource descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - NLUResourceReference

@implementation NLUResourceReference

@dynamic type;
@dynamic uri;
@dynamic requestTimeoutMs;
@dynamic headers, headers_Count;

typedef struct NLUResourceReference__storage_ {
  uint32_t _has_storage_[1];
  NLUEnumResourceType type;
  uint32_t requestTimeoutMs;
  NSString *uri;
  NSMutableDictionary *headers;
} NLUResourceReference__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = NLUEnumResourceType_EnumDescriptor,
        .number = NLUResourceReference_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NLUResourceReference__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "uri",
        .dataTypeSpecific.clazz = Nil,
        .number = NLUResourceReference_FieldNumber_Uri,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NLUResourceReference__storage_, uri),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestTimeoutMs",
        .dataTypeSpecific.clazz = Nil,
        .number = NLUResourceReference_FieldNumber_RequestTimeoutMs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NLUResourceReference__storage_, requestTimeoutMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "headers",
        .dataTypeSpecific.clazz = Nil,
        .number = NLUResourceReference_FieldNumber_Headers,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NLUResourceReference__storage_, headers),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NLUResourceReference class]
                                     rootClass:[NLURuntimeRoot class]
                                          file:NLURuntimeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NLUResourceReference__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t NLUResourceReference_Type_RawValue(NLUResourceReference *message) {
  GPBDescriptor *descriptor = [NLUResourceReference descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NLUResourceReference_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetNLUResourceReference_Type_RawValue(NLUResourceReference *message, int32_t value) {
  GPBDescriptor *descriptor = [NLUResourceReference descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:NLUResourceReference_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - NLUInterpretationInput

@implementation NLUInterpretationInput

@dynamic inputUnionOneOfCase;
@dynamic text;
@dynamic asrResult;

typedef struct NLUInterpretationInput__storage_ {
  uint32_t _has_storage_[2];
  NSString *text;
  GPBAny *asrResult;
} NLUInterpretationInput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.clazz = Nil,
        .number = NLUInterpretationInput_FieldNumber_Text,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NLUInterpretationInput__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "asrResult",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = NLUInterpretationInput_FieldNumber_AsrResult,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(NLUInterpretationInput__storage_, asrResult),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NLUInterpretationInput class]
                                     rootClass:[NLURuntimeRoot class]
                                          file:NLURuntimeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NLUInterpretationInput__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "inputUnion",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void NLUInterpretationInput_ClearInputUnionOneOfCase(NLUInterpretationInput *message) {
  GPBDescriptor *descriptor = [NLUInterpretationInput descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - NLUInterpretResponse

@implementation NLUInterpretResponse

@dynamic hasStatus, status;
@dynamic hasResult, result;
@dynamic metadata, metadata_Count;

typedef struct NLUInterpretResponse__storage_ {
  uint32_t _has_storage_[1];
  NLUStatus *status;
  InterpretResult *result;
  NSMutableDictionary *metadata;
} NLUInterpretResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.clazz = GPBObjCClass(NLUStatus),
        .number = NLUInterpretResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NLUInterpretResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "result",
        .dataTypeSpecific.clazz = GPBObjCClass(InterpretResult),
        .number = NLUInterpretResponse_FieldNumber_Result,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NLUInterpretResponse__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = NLUInterpretResponse_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NLUInterpretResponse__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NLUInterpretResponse class]
                                     rootClass:[NLURuntimeRoot class]
                                          file:NLURuntimeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NLUInterpretResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NLUStatus

@implementation NLUStatus

@dynamic code;
@dynamic message;
@dynamic details;

typedef struct NLUStatus__storage_ {
  uint32_t _has_storage_[1];
  uint32_t code;
  NSString *message;
  NSString *details;
} NLUStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = NLUStatus_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NLUStatus__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = Nil,
        .number = NLUStatus_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NLUStatus__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "details",
        .dataTypeSpecific.clazz = Nil,
        .number = NLUStatus_FieldNumber_Details,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NLUStatus__storage_, details),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NLUStatus class]
                                     rootClass:[NLURuntimeRoot class]
                                          file:NLURuntimeRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NLUStatus__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
