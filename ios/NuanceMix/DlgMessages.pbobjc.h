// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dlg_messages.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class ASRAudioFormat;
@class ASRControlMessage;
@class ASRFormatting;
@class ASRRecognitionFlags;
@class ASRRecognitionResource;
@class ASRResult;
@class ASRStartOfSpeech;
@class ASRStatus;
@class DLGAsrParamsV1;
@class DLGExecuteRequest;
@class DLGExecuteRequestPayload;
@class DLGExecuteResponse;
@class DLGExecuteResponsePayload;
@class DLGSelector;
@class DLGStartRequestPayload;
@class DLGStartResponsePayload;
@class DLGTtsParamsV1;
@class DLGUpdateRequestPayload;
@class TTSAudioParameters;
@class TTSSynthesisResponse;
@class TTSVoice;
GPB_ENUM_FWD_DECLARE(ASREnumResultType);
GPB_ENUM_FWD_DECLARE(ASREnumUtteranceDetectionMode);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - DLGDlgMessagesRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface DLGDlgMessagesRoot : GPBRootObject
@end

#pragma mark - DLGStreamInput

typedef GPB_ENUM(DLGStreamInput_FieldNumber) {
  DLGStreamInput_FieldNumber_Request = 1,
  DLGStreamInput_FieldNumber_AsrControlV1 = 2,
  DLGStreamInput_FieldNumber_Audio = 3,
  DLGStreamInput_FieldNumber_TtsControlV1 = 4,
  DLGStreamInput_FieldNumber_ControlMessage = 5,
};

typedef GPB_ENUM(DLGStreamInput_AsrControlOneof_OneOfCase) {
  DLGStreamInput_AsrControlOneof_OneOfCase_GPBUnsetOneOfCase = 0,
  DLGStreamInput_AsrControlOneof_OneOfCase_AsrControlV1 = 2,
};

typedef GPB_ENUM(DLGStreamInput_TtsControlOneof_OneOfCase) {
  DLGStreamInput_TtsControlOneof_OneOfCase_GPBUnsetOneOfCase = 0,
  DLGStreamInput_TtsControlOneof_OneOfCase_TtsControlV1 = 4,
};

/**
 * Performs recognition on streamed audio using ASRaaS and requests speech synthesis using TTSaaS.
 **/
GPB_FINAL @interface DLGStreamInput : GPBMessage

/** Standard DLGaaS ExecuteRequest; used to continue the dialog interactions. */
@property(nonatomic, readwrite, strong, null_resettable) DLGExecuteRequest *request;
/** Test to see if @c request has been set. */
@property(nonatomic, readwrite) BOOL hasRequest;

@property(nonatomic, readonly) DLGStreamInput_AsrControlOneof_OneOfCase asrControlOneofOneOfCase;

/** Parameters to be forwarded to the ASR service. */
@property(nonatomic, readwrite, strong, null_resettable) DLGAsrParamsV1 *asrControlV1;

/** Audio samples in the selected encoding for recognition. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *audio;

@property(nonatomic, readonly) DLGStreamInput_TtsControlOneof_OneOfCase ttsControlOneofOneOfCase;

/** Parameters to be forwarded to the TTS service. */
@property(nonatomic, readwrite, strong, null_resettable) DLGTtsParamsV1 *ttsControlV1;

/** Optional second message in the input stream, for ASR timer control. */
@property(nonatomic, readwrite, strong, null_resettable) ASRControlMessage *controlMessage;
/** Test to see if @c controlMessage has been set. */
@property(nonatomic, readwrite) BOOL hasControlMessage;

@end

/**
 * Clears whatever value was set for the oneof 'asrControlOneof'.
 **/
void DLGStreamInput_ClearAsrControlOneofOneOfCase(DLGStreamInput *message);
/**
 * Clears whatever value was set for the oneof 'ttsControlOneof'.
 **/
void DLGStreamInput_ClearTtsControlOneofOneOfCase(DLGStreamInput *message);

#pragma mark - DLGStreamOutput

typedef GPB_ENUM(DLGStreamOutput_FieldNumber) {
  DLGStreamOutput_FieldNumber_Response = 1,
  DLGStreamOutput_FieldNumber_Audio = 2,
  DLGStreamOutput_FieldNumber_AsrResult = 3,
  DLGStreamOutput_FieldNumber_AsrStatus = 4,
  DLGStreamOutput_FieldNumber_AsrStartOfSpeech = 5,
};

/**
 * Streams the requested TTS output and returns ASR results.
 **/
GPB_FINAL @interface DLGStreamOutput : GPBMessage

/** Standard DLGaaS ExecuteResponse; used to continue the dialog interactions. */
@property(nonatomic, readwrite, strong, null_resettable) DLGExecuteResponse *response;
/** Test to see if @c response has been set. */
@property(nonatomic, readwrite) BOOL hasResponse;

/** TTS output. */
@property(nonatomic, readwrite, strong, null_resettable) TTSSynthesisResponse *audio;
/** Test to see if @c audio has been set. */
@property(nonatomic, readwrite) BOOL hasAudio;

/** Output message containing the transcription result, including the result type, the start and end times, metadata about the transcription, and one or more transcription hypotheses. Included in [RecognizeResponse](#recognizeresponse). */
@property(nonatomic, readwrite, strong, null_resettable) ASRResult *asrResult;
/** Test to see if @c asrResult has been set. */
@property(nonatomic, readwrite) BOOL hasAsrResult;

/** Output message indicating the status of the transcription. */
@property(nonatomic, readwrite, strong, null_resettable) ASRStatus *asrStatus;
/** Test to see if @c asrStatus has been set. */
@property(nonatomic, readwrite) BOOL hasAsrStatus;

/** Output message containing the start-of-speech message. */
@property(nonatomic, readwrite, strong, null_resettable) ASRStartOfSpeech *asrStartOfSpeech;
/** Test to see if @c asrStartOfSpeech has been set. */
@property(nonatomic, readwrite) BOOL hasAsrStartOfSpeech;

@end

#pragma mark - DLGStartRequest

typedef GPB_ENUM(DLGStartRequest_FieldNumber) {
  DLGStartRequest_FieldNumber_SessionId = 1,
  DLGStartRequest_FieldNumber_Selector = 2,
  DLGStartRequest_FieldNumber_Payload = 3,
  DLGStartRequest_FieldNumber_SessionTimeoutSec = 4,
  DLGStartRequest_FieldNumber_UserId = 5,
  DLGStartRequest_FieldNumber_ClientData = 6,
};

/**
 * Request object used by the Start method.
 **/
GPB_FINAL @interface DLGStartRequest : GPBMessage

/** Optional session ID. If not provided then one will be generated. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;

/** Selector providing the channel and language used for the conversation. */
@property(nonatomic, readwrite, strong, null_resettable) DLGSelector *selector;
/** Test to see if @c selector has been set. */
@property(nonatomic, readwrite) BOOL hasSelector;

/** Payload of the Start request. */
@property(nonatomic, readwrite, strong, null_resettable) DLGStartRequestPayload *payload;
/** Test to see if @c payload has been set. */
@property(nonatomic, readwrite) BOOL hasPayload;

/** Session timeout value (in seconds), after which the session is terminated. The maximum is configured in the deployment. */
@property(nonatomic, readwrite) uint32_t sessionTimeoutSec;

/** Identifies a specific user within the application. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

/** Optional client-supplied key-value pairs to inject into the call log. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *clientData;
/** The number of items in @c clientData without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger clientData_Count;

@end

#pragma mark - DLGStartResponse

typedef GPB_ENUM(DLGStartResponse_FieldNumber) {
  DLGStartResponse_FieldNumber_Payload = 1,
};

/**
 * Response object used by the Start method.
 **/
GPB_FINAL @interface DLGStartResponse : GPBMessage

/** Payload of the Start response. */
@property(nonatomic, readwrite, strong, null_resettable) DLGStartResponsePayload *payload;
/** Test to see if @c payload has been set. */
@property(nonatomic, readwrite) BOOL hasPayload;

@end

#pragma mark - DLGUpdateRequest

typedef GPB_ENUM(DLGUpdateRequest_FieldNumber) {
  DLGUpdateRequest_FieldNumber_SessionId = 1,
  DLGUpdateRequest_FieldNumber_Payload = 2,
  DLGUpdateRequest_FieldNumber_ClientData = 3,
  DLGUpdateRequest_FieldNumber_UserId = 4,
};

/**
 * Request object used by the Update method.
 **/
GPB_FINAL @interface DLGUpdateRequest : GPBMessage

/** ID for the session. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;

/** Payload of the Update request. */
@property(nonatomic, readwrite, strong, null_resettable) DLGUpdateRequestPayload *payload;
/** Test to see if @c payload has been set. */
@property(nonatomic, readwrite) BOOL hasPayload;

/** Optional client-supplied key-value pairs to inject into the call log. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *clientData;
/** The number of items in @c clientData without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger clientData_Count;

/** Identifies a specific user within the application. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

@end

#pragma mark - DLGUpdateResponse

/**
 * Response object used by the Update method.
 **/
GPB_FINAL @interface DLGUpdateResponse : GPBMessage

@end

#pragma mark - DLGExecuteRequest

typedef GPB_ENUM(DLGExecuteRequest_FieldNumber) {
  DLGExecuteRequest_FieldNumber_SessionId = 1,
  DLGExecuteRequest_FieldNumber_Selector = 2,
  DLGExecuteRequest_FieldNumber_Payload = 3,
  DLGExecuteRequest_FieldNumber_UserId = 5,
};

/**
 * Request object used by the Execute method.
 **/
GPB_FINAL @interface DLGExecuteRequest : GPBMessage

/** ID for the session. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;

/** Selector providing the channel and language used for the conversation. */
@property(nonatomic, readwrite, strong, null_resettable) DLGSelector *selector;
/** Test to see if @c selector has been set. */
@property(nonatomic, readwrite) BOOL hasSelector;

/** Payload of the Execute request. */
@property(nonatomic, readwrite, strong, null_resettable) DLGExecuteRequestPayload *payload;
/** Test to see if @c payload has been set. */
@property(nonatomic, readwrite) BOOL hasPayload;

/** Identifies a specific user within the application. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

@end

#pragma mark - DLGAsrParamsV1

typedef GPB_ENUM(DLGAsrParamsV1_FieldNumber) {
  DLGAsrParamsV1_FieldNumber_AudioFormat = 1,
  DLGAsrParamsV1_FieldNumber_UtteranceDetectionMode = 2,
  DLGAsrParamsV1_FieldNumber_RecognitionFlags = 3,
  DLGAsrParamsV1_FieldNumber_ResultType = 4,
  DLGAsrParamsV1_FieldNumber_NoInputTimeoutMs = 5,
  DLGAsrParamsV1_FieldNumber_RecognitionTimeoutMs = 6,
  DLGAsrParamsV1_FieldNumber_UtteranceEndSilenceMs = 7,
  DLGAsrParamsV1_FieldNumber_SpeechDetectionSensitivity = 8,
  DLGAsrParamsV1_FieldNumber_MaxHypotheses = 9,
  DLGAsrParamsV1_FieldNumber_EndStreamNoValidHypotheses = 10,
  DLGAsrParamsV1_FieldNumber_ResourcesArray = 11,
  DLGAsrParamsV1_FieldNumber_SpeechDomain = 12,
  DLGAsrParamsV1_FieldNumber_Formatting = 13,
};

typedef GPB_ENUM(DLGAsrParamsV1_OptionalSpeechDetectionSensitivity_OneOfCase) {
  DLGAsrParamsV1_OptionalSpeechDetectionSensitivity_OneOfCase_GPBUnsetOneOfCase = 0,
  DLGAsrParamsV1_OptionalSpeechDetectionSensitivity_OneOfCase_SpeechDetectionSensitivity = 8,
};

/**
 * Parameters to be forwarded to the ASR service.
 **/
GPB_FINAL @interface DLGAsrParamsV1 : GPBMessage

/** Audio codec type and sample rate. */
@property(nonatomic, readwrite, strong, null_resettable) ASRAudioFormat *audioFormat;
/** Test to see if @c audioFormat has been set. */
@property(nonatomic, readwrite) BOOL hasAudioFormat;

/** How end of utterance is determined. Defaults to SINGLE. */
@property(nonatomic, readwrite) enum ASREnumUtteranceDetectionMode utteranceDetectionMode;

/** Flags to fine tune recognition. */
@property(nonatomic, readwrite, strong, null_resettable) ASRRecognitionFlags *recognitionFlags;
/** Test to see if @c recognitionFlags has been set. */
@property(nonatomic, readwrite) BOOL hasRecognitionFlags;

/** Whether final, partial, or immutable results are returned. */
@property(nonatomic, readwrite) enum ASREnumResultType resultType;

/** Maximum silence, in ms, allowed while waiting for user input after recognition timers are started. Default (0) means server default, usually no timeout. */
@property(nonatomic, readwrite) uint32_t noInputTimeoutMs;

/** Maximum duration, in ms, of recognition turn. Default (0) means server default, usually no timeout. */
@property(nonatomic, readwrite) uint32_t recognitionTimeoutMs;

/** Minimum silence, in ms, that determines the end of an utterance. Default (0) means server default, usually 500ms or half a second. */
@property(nonatomic, readwrite) uint32_t utteranceEndSilenceMs;

@property(nonatomic, readonly) DLGAsrParamsV1_OptionalSpeechDetectionSensitivity_OneOfCase optionalSpeechDetectionSensitivityOneOfCase;

/** A balance between detecting speech and noise (breathing, etc.), 0 to 1. 0 means ignore all noise, 1 means interpret all noise as speech. Default is 0.5. */
@property(nonatomic, readwrite) float speechDetectionSensitivity;

/** Maximum number of n-best hypotheses to return. Default (0) means a server default. */
@property(nonatomic, readwrite) uint32_t maxHypotheses;

/** Determines whether the dialog or the client application handles the dialog flow when ASRaaS does not return a valid hypothesis. When set to false (default), the dialog flow is determined by the Mix.dialog application. Set to true to close the stream and hand the control back to the client application. */
@property(nonatomic, readwrite) BOOL endStreamNoValidHypotheses;

/** Repeated. Resources (DLMs, wordsets, builtins) to improve recognition. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<ASRRecognitionResource*> *resourcesArray;
/** The number of items in @c resourcesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger resourcesArray_Count;

/** Mapping to internal weight sets for language models in the data pack. Values depend on the data pack. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *speechDomain;

/** Specifies how the transcription results are presented, using keywords for formatting schemes and options supported by the data pack. */
@property(nonatomic, readwrite, strong, null_resettable) ASRFormatting *formatting;
/** Test to see if @c formatting has been set. */
@property(nonatomic, readwrite) BOOL hasFormatting;

@end

/**
 * Fetches the raw value of a @c DLGAsrParamsV1's @c utteranceDetectionMode property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t DLGAsrParamsV1_UtteranceDetectionMode_RawValue(DLGAsrParamsV1 *message);
/**
 * Sets the raw value of an @c DLGAsrParamsV1's @c utteranceDetectionMode property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetDLGAsrParamsV1_UtteranceDetectionMode_RawValue(DLGAsrParamsV1 *message, int32_t value);

/**
 * Fetches the raw value of a @c DLGAsrParamsV1's @c resultType property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t DLGAsrParamsV1_ResultType_RawValue(DLGAsrParamsV1 *message);
/**
 * Sets the raw value of an @c DLGAsrParamsV1's @c resultType property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetDLGAsrParamsV1_ResultType_RawValue(DLGAsrParamsV1 *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'optionalSpeechDetectionSensitivity'.
 **/
void DLGAsrParamsV1_ClearOptionalSpeechDetectionSensitivityOneOfCase(DLGAsrParamsV1 *message);

#pragma mark - DLGTtsParamsV1

typedef GPB_ENUM(DLGTtsParamsV1_FieldNumber) {
  DLGTtsParamsV1_FieldNumber_AudioParams = 1,
  DLGTtsParamsV1_FieldNumber_Voice = 2,
};

/**
 * Parameters to be forwarded to the TTS service.
 **/
GPB_FINAL @interface DLGTtsParamsV1 : GPBMessage

/** Output audio parameters, such as encoding and volume. */
@property(nonatomic, readwrite, strong, null_resettable) TTSAudioParameters *audioParams;
/** Test to see if @c audioParams has been set. */
@property(nonatomic, readwrite) BOOL hasAudioParams;

/** The voice to use for audio synthesis. */
@property(nonatomic, readwrite, strong, null_resettable) TTSVoice *voice;
/** Test to see if @c voice has been set. */
@property(nonatomic, readwrite) BOOL hasVoice;

@end

#pragma mark - DLGExecuteResponse

typedef GPB_ENUM(DLGExecuteResponse_FieldNumber) {
  DLGExecuteResponse_FieldNumber_Payload = 1,
};

/**
 * Response object used by the Execute method.
 **/
GPB_FINAL @interface DLGExecuteResponse : GPBMessage

/** Payload of the Execute response. */
@property(nonatomic, readwrite, strong, null_resettable) DLGExecuteResponsePayload *payload;
/** Test to see if @c payload has been set. */
@property(nonatomic, readwrite) BOOL hasPayload;

@end

#pragma mark - DLGStopRequest

typedef GPB_ENUM(DLGStopRequest_FieldNumber) {
  DLGStopRequest_FieldNumber_SessionId = 1,
  DLGStopRequest_FieldNumber_UserId = 5,
};

/**
 * Request object used by Stop method.
 **/
GPB_FINAL @interface DLGStopRequest : GPBMessage

/** ID for the session. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;

/** Identifies a specific user within the application. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

@end

#pragma mark - DLGStopResponse

/**
 * Response object used by the Stop method. Currently empty; reserved for future use.
 **/
GPB_FINAL @interface DLGStopResponse : GPBMessage

@end

#pragma mark - DLGStatusRequest

typedef GPB_ENUM(DLGStatusRequest_FieldNumber) {
  DLGStatusRequest_FieldNumber_SessionId = 1,
};

/**
 * Request object used by Status method.
 **/
GPB_FINAL @interface DLGStatusRequest : GPBMessage

/** ID for the session. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;

@end

#pragma mark - DLGStatusResponse

typedef GPB_ENUM(DLGStatusResponse_FieldNumber) {
  DLGStatusResponse_FieldNumber_SessionRemainingSec = 1,
};

/**
 * Response object used by the Status method.
 **/
GPB_FINAL @interface DLGStatusResponse : GPBMessage

/** Remaining session time to live (TTL) value in seconds, after which the session is terminated. Note: the TTL may be a few seconds off based on how long the round trip of the request took. */
@property(nonatomic, readwrite) uint32_t sessionRemainingSec;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
