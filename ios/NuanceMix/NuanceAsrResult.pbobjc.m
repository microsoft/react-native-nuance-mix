// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nuance_asr_result.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "NuanceAsrResult.pbobjc.h"
#import "ErrorDetails.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ASRDataPack);
GPBObjCClassDeclaration(ASRDsp);
GPBObjCClassDeclaration(ASRHypothesis);
GPBObjCClassDeclaration(ASRNotification);
GPBObjCClassDeclaration(ASRUtteranceInfo);
GPBObjCClassDeclaration(ASRWord);
GPBObjCClassDeclaration(LocalizedMessage);

#pragma mark - ASRNuanceAsrResultRoot

@implementation ASRNuanceAsrResultRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ASRNuanceAsrResultRoot_FileDescriptor

static GPBFileDescriptor *ASRNuanceAsrResultRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"nuance.asr.v1"
                                                 objcPrefix:@"ASR"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum ASREnumResultType

GPBEnumDescriptor *ASREnumResultType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Final\000Partial\000ImmutablePartial\000";
    static const int32_t values[] = {
        ASREnumResultType_Final,
        ASREnumResultType_Partial,
        ASREnumResultType_ImmutablePartial,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ASREnumResultType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ASREnumResultType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ASREnumResultType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ASREnumResultType_Final:
    case ASREnumResultType_Partial:
    case ASREnumResultType_ImmutablePartial:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ASREnumSeverityType

GPBEnumDescriptor *ASREnumSeverityType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "SeverityUnknown\000SeverityError\000SeverityWa"
        "rning\000SeverityInfo\000";
    static const int32_t values[] = {
        ASREnumSeverityType_SeverityUnknown,
        ASREnumSeverityType_SeverityError,
        ASREnumSeverityType_SeverityWarning,
        ASREnumSeverityType_SeverityInfo,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ASREnumSeverityType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ASREnumSeverityType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ASREnumSeverityType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ASREnumSeverityType_SeverityUnknown:
    case ASREnumSeverityType_SeverityError:
    case ASREnumSeverityType_SeverityWarning:
    case ASREnumSeverityType_SeverityInfo:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ASRResult

@implementation ASRResult

@dynamic resultType;
@dynamic absStartMs;
@dynamic absEndMs;
@dynamic hasUtteranceInfo, utteranceInfo;
@dynamic hypothesesArray, hypothesesArray_Count;
@dynamic hasDataPack, dataPack;
@dynamic notificationsArray, notificationsArray_Count;

typedef struct ASRResult__storage_ {
  uint32_t _has_storage_[1];
  ASREnumResultType resultType;
  uint32_t absStartMs;
  uint32_t absEndMs;
  ASRUtteranceInfo *utteranceInfo;
  NSMutableArray *hypothesesArray;
  ASRDataPack *dataPack;
  NSMutableArray *notificationsArray;
} ASRResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resultType",
        .dataTypeSpecific.enumDescFunc = ASREnumResultType_EnumDescriptor,
        .number = ASRResult_FieldNumber_ResultType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ASRResult__storage_, resultType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "absStartMs",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRResult_FieldNumber_AbsStartMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ASRResult__storage_, absStartMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "absEndMs",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRResult_FieldNumber_AbsEndMs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ASRResult__storage_, absEndMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "utteranceInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRUtteranceInfo),
        .number = ASRResult_FieldNumber_UtteranceInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ASRResult__storage_, utteranceInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hypothesesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRHypothesis),
        .number = ASRResult_FieldNumber_HypothesesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ASRResult__storage_, hypothesesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dataPack",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRDataPack),
        .number = ASRResult_FieldNumber_DataPack,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ASRResult__storage_, dataPack),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "notificationsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRNotification),
        .number = ASRResult_FieldNumber_NotificationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ASRResult__storage_, notificationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRResult class]
                                     rootClass:[ASRNuanceAsrResultRoot class]
                                          file:ASRNuanceAsrResultRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRResult__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ASRResult_ResultType_RawValue(ASRResult *message) {
  GPBDescriptor *descriptor = [ASRResult descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ASRResult_FieldNumber_ResultType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetASRResult_ResultType_RawValue(ASRResult *message, int32_t value) {
  GPBDescriptor *descriptor = [ASRResult descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ASRResult_FieldNumber_ResultType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ASRUtteranceInfo

@implementation ASRUtteranceInfo

@dynamic durationMs;
@dynamic clippingDurationMs;
@dynamic droppedSpeechPackets;
@dynamic droppedNonspeechPackets;
@dynamic hasDsp, dsp;

typedef struct ASRUtteranceInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t durationMs;
  uint32_t clippingDurationMs;
  uint32_t droppedSpeechPackets;
  uint32_t droppedNonspeechPackets;
  ASRDsp *dsp;
} ASRUtteranceInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "durationMs",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRUtteranceInfo_FieldNumber_DurationMs,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ASRUtteranceInfo__storage_, durationMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "clippingDurationMs",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRUtteranceInfo_FieldNumber_ClippingDurationMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ASRUtteranceInfo__storage_, clippingDurationMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "droppedSpeechPackets",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRUtteranceInfo_FieldNumber_DroppedSpeechPackets,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ASRUtteranceInfo__storage_, droppedSpeechPackets),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "droppedNonspeechPackets",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRUtteranceInfo_FieldNumber_DroppedNonspeechPackets,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ASRUtteranceInfo__storage_, droppedNonspeechPackets),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dsp",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRDsp),
        .number = ASRUtteranceInfo_FieldNumber_Dsp,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ASRUtteranceInfo__storage_, dsp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRUtteranceInfo class]
                                     rootClass:[ASRNuanceAsrResultRoot class]
                                          file:ASRNuanceAsrResultRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRUtteranceInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ASRDsp

@implementation ASRDsp

@dynamic snrEstimateDb;
@dynamic level;
@dynamic numChannels;
@dynamic initialSilenceMs;
@dynamic initialEnergy;
@dynamic finalEnergy;
@dynamic meanEnergy;

typedef struct ASRDsp__storage_ {
  uint32_t _has_storage_[1];
  float snrEstimateDb;
  float level;
  uint32_t numChannels;
  uint32_t initialSilenceMs;
  float initialEnergy;
  float finalEnergy;
  float meanEnergy;
} ASRDsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "snrEstimateDb",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRDsp_FieldNumber_SnrEstimateDb,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ASRDsp__storage_, snrEstimateDb),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "level",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRDsp_FieldNumber_Level,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ASRDsp__storage_, level),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "numChannels",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRDsp_FieldNumber_NumChannels,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ASRDsp__storage_, numChannels),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "initialSilenceMs",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRDsp_FieldNumber_InitialSilenceMs,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ASRDsp__storage_, initialSilenceMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "initialEnergy",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRDsp_FieldNumber_InitialEnergy,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ASRDsp__storage_, initialEnergy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "finalEnergy",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRDsp_FieldNumber_FinalEnergy,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ASRDsp__storage_, finalEnergy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "meanEnergy",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRDsp_FieldNumber_MeanEnergy,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ASRDsp__storage_, meanEnergy),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRDsp class]
                                     rootClass:[ASRNuanceAsrResultRoot class]
                                          file:ASRNuanceAsrResultRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRDsp__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ASRHypothesis

@implementation ASRHypothesis

@dynamic optionalHypothesisConfidenceOneOfCase;
@dynamic optionalHypothesisAverageConfidenceOneOfCase;
@dynamic optionalHypothesisGrammarIdOneOfCase;
@dynamic optionalDetectedWuwOneOfCase;
@dynamic confidence;
@dynamic averageConfidence;
@dynamic rejected;
@dynamic formattedText;
@dynamic minimallyFormattedText;
@dynamic wordsArray, wordsArray_Count;
@dynamic encryptedTokenization;
@dynamic grammarId;
@dynamic detectedWakeupWord;

typedef struct ASRHypothesis__storage_ {
  uint32_t _has_storage_[5];
  float confidence;
  float averageConfidence;
  NSString *formattedText;
  NSString *minimallyFormattedText;
  NSMutableArray *wordsArray;
  NSString *encryptedTokenization;
  NSString *grammarId;
  NSString *detectedWakeupWord;
} ASRHypothesis__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "confidence",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRHypothesis_FieldNumber_Confidence,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ASRHypothesis__storage_, confidence),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "averageConfidence",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRHypothesis_FieldNumber_AverageConfidence,
        .hasIndex = -2,
        .offset = (uint32_t)offsetof(ASRHypothesis__storage_, averageConfidence),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "rejected",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRHypothesis_FieldNumber_Rejected,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "formattedText",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRHypothesis_FieldNumber_FormattedText,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ASRHypothesis__storage_, formattedText),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "minimallyFormattedText",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRHypothesis_FieldNumber_MinimallyFormattedText,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ASRHypothesis__storage_, minimallyFormattedText),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wordsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRWord),
        .number = ASRHypothesis_FieldNumber_WordsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ASRHypothesis__storage_, wordsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "encryptedTokenization",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRHypothesis_FieldNumber_EncryptedTokenization,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ASRHypothesis__storage_, encryptedTokenization),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "grammarId",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRHypothesis_FieldNumber_GrammarId,
        .hasIndex = -3,
        .offset = (uint32_t)offsetof(ASRHypothesis__storage_, grammarId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "detectedWakeupWord",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRHypothesis_FieldNumber_DetectedWakeupWord,
        .hasIndex = -4,
        .offset = (uint32_t)offsetof(ASRHypothesis__storage_, detectedWakeupWord),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRHypothesis class]
                                     rootClass:[ASRNuanceAsrResultRoot class]
                                          file:ASRNuanceAsrResultRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRHypothesis__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "optionalHypothesisConfidence",
      "optionalHypothesisAverageConfidence",
      "optionalHypothesisGrammarId",
      "optionalDetectedWuw",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ASRHypothesis_ClearOptionalHypothesisConfidenceOneOfCase(ASRHypothesis *message) {
  GPBDescriptor *descriptor = [ASRHypothesis descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
void ASRHypothesis_ClearOptionalHypothesisAverageConfidenceOneOfCase(ASRHypothesis *message) {
  GPBDescriptor *descriptor = [ASRHypothesis descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:1];
  GPBClearOneof(message, oneof);
}
void ASRHypothesis_ClearOptionalHypothesisGrammarIdOneOfCase(ASRHypothesis *message) {
  GPBDescriptor *descriptor = [ASRHypothesis descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:2];
  GPBClearOneof(message, oneof);
}
void ASRHypothesis_ClearOptionalDetectedWuwOneOfCase(ASRHypothesis *message) {
  GPBDescriptor *descriptor = [ASRHypothesis descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:3];
  GPBClearOneof(message, oneof);
}
#pragma mark - ASRWord

@implementation ASRWord

@dynamic optionalWordConfidenceOneOfCase;
@dynamic optionalWordGrammarRuleOneOfCase;
@dynamic text;
@dynamic confidence;
@dynamic startMs;
@dynamic endMs;
@dynamic silenceAfterWordMs;
@dynamic grammarRule;

typedef struct ASRWord__storage_ {
  uint32_t _has_storage_[3];
  float confidence;
  uint32_t startMs;
  uint32_t endMs;
  uint32_t silenceAfterWordMs;
  NSString *text;
  NSString *grammarRule;
} ASRWord__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "text",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRWord_FieldNumber_Text,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ASRWord__storage_, text),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "confidence",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRWord_FieldNumber_Confidence,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ASRWord__storage_, confidence),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "startMs",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRWord_FieldNumber_StartMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ASRWord__storage_, startMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "endMs",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRWord_FieldNumber_EndMs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ASRWord__storage_, endMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "silenceAfterWordMs",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRWord_FieldNumber_SilenceAfterWordMs,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ASRWord__storage_, silenceAfterWordMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "grammarRule",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRWord_FieldNumber_GrammarRule,
        .hasIndex = -2,
        .offset = (uint32_t)offsetof(ASRWord__storage_, grammarRule),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRWord class]
                                     rootClass:[ASRNuanceAsrResultRoot class]
                                          file:ASRNuanceAsrResultRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRWord__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "optionalWordConfidence",
      "optionalWordGrammarRule",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ASRWord_ClearOptionalWordConfidenceOneOfCase(ASRWord *message) {
  GPBDescriptor *descriptor = [ASRWord descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
void ASRWord_ClearOptionalWordGrammarRuleOneOfCase(ASRWord *message) {
  GPBDescriptor *descriptor = [ASRWord descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:1];
  GPBClearOneof(message, oneof);
}
#pragma mark - ASRDataPack

@implementation ASRDataPack

@dynamic language;
@dynamic topic;
@dynamic version;
@dynamic id_p;

typedef struct ASRDataPack__storage_ {
  uint32_t _has_storage_[1];
  NSString *language;
  NSString *topic;
  NSString *version;
  NSString *id_p;
} ASRDataPack__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "language",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRDataPack_FieldNumber_Language,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ASRDataPack__storage_, language),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "topic",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRDataPack_FieldNumber_Topic,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ASRDataPack__storage_, topic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRDataPack_FieldNumber_Version,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ASRDataPack__storage_, version),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRDataPack_FieldNumber_Id_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ASRDataPack__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRDataPack class]
                                     rootClass:[ASRNuanceAsrResultRoot class]
                                          file:ASRNuanceAsrResultRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRDataPack__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ASRNotification

@implementation ASRNotification

@dynamic code;
@dynamic severity;
@dynamic hasMessage, message;
@dynamic data_p, data_p_Count;

typedef struct ASRNotification__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  ASREnumSeverityType severity;
  LocalizedMessage *message;
  NSMutableDictionary *data_p;
} ASRNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRNotification_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ASRNotification__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "severity",
        .dataTypeSpecific.enumDescFunc = ASREnumSeverityType_EnumDescriptor,
        .number = ASRNotification_FieldNumber_Severity,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ASRNotification__storage_, severity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = GPBObjCClass(LocalizedMessage),
        .number = ASRNotification_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ASRNotification__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRNotification_FieldNumber_Data_p,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ASRNotification__storage_, data_p),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRNotification class]
                                     rootClass:[ASRNuanceAsrResultRoot class]
                                          file:ASRNuanceAsrResultRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ASRNotification_Severity_RawValue(ASRNotification *message) {
  GPBDescriptor *descriptor = [ASRNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ASRNotification_FieldNumber_Severity];
  return GPBGetMessageRawEnumField(message, field);
}

void SetASRNotification_Severity_RawValue(ASRNotification *message, int32_t value) {
  GPBDescriptor *descriptor = [ASRNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ASRNotification_FieldNumber_Severity];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
