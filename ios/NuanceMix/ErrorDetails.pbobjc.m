// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: error_details.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "ErrorDetails.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(HelpInfo);
GPBObjCClassDeclaration(HelpInfo_Hyperlink);
GPBObjCClassDeclaration(LocalizedMessage);
GPBObjCClassDeclaration(RequestInfo);
GPBObjCClassDeclaration(StatusDetail);

#pragma mark - ErrorDetailsRoot

@implementation ErrorDetailsRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ErrorDetailsRoot_FileDescriptor

static GPBFileDescriptor *ErrorDetailsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"nuance.rpc"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RetryInfo

@implementation RetryInfo

@dynamic retryDelayMs;

typedef struct RetryInfo__storage_ {
  uint32_t _has_storage_[1];
  int32_t retryDelayMs;
} RetryInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "retryDelayMs",
        .dataTypeSpecific.clazz = Nil,
        .number = RetryInfo_FieldNumber_RetryDelayMs,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RetryInfo__storage_, retryDelayMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RetryInfo class]
                                     rootClass:[ErrorDetailsRoot class]
                                          file:ErrorDetailsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RetryInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RequestInfo

@implementation RequestInfo

@dynamic requestId;
@dynamic requestData;
@dynamic additionalRequestData, additionalRequestData_Count;

typedef struct RequestInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *requestId;
  NSString *requestData;
  NSMutableDictionary *additionalRequestData;
} RequestInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "requestId",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestInfo_FieldNumber_RequestId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RequestInfo__storage_, requestId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "requestData",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestInfo_FieldNumber_RequestData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RequestInfo__storage_, requestData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "additionalRequestData",
        .dataTypeSpecific.clazz = Nil,
        .number = RequestInfo_FieldNumber_AdditionalRequestData,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RequestInfo__storage_, additionalRequestData),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RequestInfo class]
                                     rootClass:[ErrorDetailsRoot class]
                                          file:ErrorDetailsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RequestInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HelpInfo

@implementation HelpInfo

@dynamic linksArray, linksArray_Count;

typedef struct HelpInfo__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *linksArray;
} HelpInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "linksArray",
        .dataTypeSpecific.clazz = GPBObjCClass(HelpInfo_Hyperlink),
        .number = HelpInfo_FieldNumber_LinksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HelpInfo__storage_, linksArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HelpInfo class]
                                     rootClass:[ErrorDetailsRoot class]
                                          file:ErrorDetailsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HelpInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HelpInfo_Hyperlink

@implementation HelpInfo_Hyperlink

@dynamic hasDescription_p, description_p;
@dynamic URL;

typedef struct HelpInfo_Hyperlink__storage_ {
  uint32_t _has_storage_[1];
  LocalizedMessage *description_p;
  NSString *URL;
} HelpInfo_Hyperlink__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = GPBObjCClass(LocalizedMessage),
        .number = HelpInfo_Hyperlink_FieldNumber_Description_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HelpInfo_Hyperlink__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "URL",
        .dataTypeSpecific.clazz = Nil,
        .number = HelpInfo_Hyperlink_FieldNumber_URL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HelpInfo_Hyperlink__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HelpInfo_Hyperlink class]
                                     rootClass:[ErrorDetailsRoot class]
                                          file:ErrorDetailsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HelpInfo_Hyperlink__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClass:GPBObjCClass(HelpInfo)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LocalizedMessage

@implementation LocalizedMessage

@dynamic locale;
@dynamic message;
@dynamic messageResourceId;

typedef struct LocalizedMessage__storage_ {
  uint32_t _has_storage_[1];
  NSString *locale;
  NSString *message;
  NSString *messageResourceId;
} LocalizedMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "locale",
        .dataTypeSpecific.clazz = Nil,
        .number = LocalizedMessage_FieldNumber_Locale,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LocalizedMessage__storage_, locale),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = Nil,
        .number = LocalizedMessage_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(LocalizedMessage__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageResourceId",
        .dataTypeSpecific.clazz = Nil,
        .number = LocalizedMessage_FieldNumber_MessageResourceId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LocalizedMessage__storage_, messageResourceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LocalizedMessage class]
                                     rootClass:[ErrorDetailsRoot class]
                                          file:ErrorDetailsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LocalizedMessage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FieldViolation

@implementation FieldViolation

@dynamic field;
@dynamic relFieldArray, relFieldArray_Count;
@dynamic hasUserMessage, userMessage;
@dynamic message;
@dynamic invalidValue;
@dynamic violation;

typedef struct FieldViolation__storage_ {
  uint32_t _has_storage_[1];
  FieldViolation_ViolationType violation;
  NSString *field;
  NSMutableArray *relFieldArray;
  LocalizedMessage *userMessage;
  NSString *message;
  NSString *invalidValue;
} FieldViolation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "field",
        .dataTypeSpecific.clazz = Nil,
        .number = FieldViolation_FieldNumber_Field,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FieldViolation__storage_, field),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "relFieldArray",
        .dataTypeSpecific.clazz = Nil,
        .number = FieldViolation_FieldNumber_RelFieldArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FieldViolation__storage_, relFieldArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userMessage",
        .dataTypeSpecific.clazz = GPBObjCClass(LocalizedMessage),
        .number = FieldViolation_FieldNumber_UserMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FieldViolation__storage_, userMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = Nil,
        .number = FieldViolation_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FieldViolation__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "invalidValue",
        .dataTypeSpecific.clazz = Nil,
        .number = FieldViolation_FieldNumber_InvalidValue,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FieldViolation__storage_, invalidValue),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "violation",
        .dataTypeSpecific.enumDescFunc = FieldViolation_ViolationType_EnumDescriptor,
        .number = FieldViolation_FieldNumber_Violation,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(FieldViolation__storage_, violation),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FieldViolation class]
                                     rootClass:[ErrorDetailsRoot class]
                                          file:ErrorDetailsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FieldViolation__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t FieldViolation_Violation_RawValue(FieldViolation *message) {
  GPBDescriptor *descriptor = [FieldViolation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FieldViolation_FieldNumber_Violation];
  return GPBGetMessageRawEnumField(message, field);
}

void SetFieldViolation_Violation_RawValue(FieldViolation *message, int32_t value) {
  GPBDescriptor *descriptor = [FieldViolation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FieldViolation_FieldNumber_Violation];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum FieldViolation_ViolationType

GPBEnumDescriptor *FieldViolation_ViolationType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "MandatoryFieldMissing\000FieldConflict\000OutO"
        "fRange\000InvalidFormat\000TooShort\000TooLong\000Ot"
        "her\000Unspecified\000";
    static const int32_t values[] = {
        FieldViolation_ViolationType_MandatoryFieldMissing,
        FieldViolation_ViolationType_FieldConflict,
        FieldViolation_ViolationType_OutOfRange,
        FieldViolation_ViolationType_InvalidFormat,
        FieldViolation_ViolationType_TooShort,
        FieldViolation_ViolationType_TooLong,
        FieldViolation_ViolationType_Other,
        FieldViolation_ViolationType_Unspecified,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(FieldViolation_ViolationType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:FieldViolation_ViolationType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL FieldViolation_ViolationType_IsValidValue(int32_t value__) {
  switch (value__) {
    case FieldViolation_ViolationType_MandatoryFieldMissing:
    case FieldViolation_ViolationType_FieldConflict:
    case FieldViolation_ViolationType_OutOfRange:
    case FieldViolation_ViolationType_InvalidFormat:
    case FieldViolation_ViolationType_TooShort:
    case FieldViolation_ViolationType_TooLong:
    case FieldViolation_ViolationType_Other:
    case FieldViolation_ViolationType_Unspecified:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - StatusDetail

@implementation StatusDetail

@dynamic message;
@dynamic hasUserMessage, userMessage;
@dynamic extras, extras_Count;

typedef struct StatusDetail__storage_ {
  uint32_t _has_storage_[1];
  NSString *message;
  LocalizedMessage *userMessage;
  NSMutableDictionary *extras;
} StatusDetail__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "message",
        .dataTypeSpecific.clazz = Nil,
        .number = StatusDetail_FieldNumber_Message,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StatusDetail__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userMessage",
        .dataTypeSpecific.clazz = GPBObjCClass(LocalizedMessage),
        .number = StatusDetail_FieldNumber_UserMessage,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StatusDetail__storage_, userMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "extras",
        .dataTypeSpecific.clazz = Nil,
        .number = StatusDetail_FieldNumber_Extras,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(StatusDetail__storage_, extras),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StatusDetail class]
                                     rootClass:[ErrorDetailsRoot class]
                                          file:ErrorDetailsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StatusDetail__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
