// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: multi-intent-interpretation.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "MultiIntentInterpretation.pbobjc.h"
#import "InterpretationCommon.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AudioRange);
GPBObjCClassDeclaration(EntityNode);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(GPBStruct);
GPBObjCClassDeclaration(IntentNode);
GPBObjCClassDeclaration(InterpretationNode);
GPBObjCClassDeclaration(MultiIntentInterpretation);
GPBObjCClassDeclaration(OperatorNode);
GPBObjCClassDeclaration(TextRange);

#pragma mark - MultiIntentInterpretationRoot

@implementation MultiIntentInterpretationRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MultiIntentInterpretationRoot_FileDescriptor

static GPBFileDescriptor *MultiIntentInterpretationRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"nuance.nlu.v1"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum EnumOperator

GPBEnumDescriptor *EnumOperator_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "And\000Or\000Not\000";
    static const int32_t values[] = {
        EnumOperator_And,
        EnumOperator_Or,
        EnumOperator_Not,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(EnumOperator)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:EnumOperator_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL EnumOperator_IsValidValue(int32_t value__) {
  switch (value__) {
    case EnumOperator_And:
    case EnumOperator_Or:
    case EnumOperator_Not:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - MultiIntentInterpretation

@implementation MultiIntentInterpretation

@dynamic hasRoot, root;
@dynamic metadata, metadata_Count;

typedef struct MultiIntentInterpretation__storage_ {
  uint32_t _has_storage_[1];
  InterpretationNode *root;
  NSMutableDictionary *metadata;
} MultiIntentInterpretation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "root",
        .dataTypeSpecific.clazz = GPBObjCClass(InterpretationNode),
        .number = MultiIntentInterpretation_FieldNumber_Root,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MultiIntentInterpretation__storage_, root),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = MultiIntentInterpretation_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MultiIntentInterpretation__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MultiIntentInterpretation class]
                                     rootClass:[MultiIntentInterpretationRoot class]
                                          file:MultiIntentInterpretationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MultiIntentInterpretation__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InterpretationNode

@implementation InterpretationNode

@dynamic interpretationNodeUnionOneOfCase;
@dynamic operator_p;
@dynamic intent;
@dynamic entity;

typedef struct InterpretationNode__storage_ {
  uint32_t _has_storage_[2];
  OperatorNode *operator_p;
  IntentNode *intent;
  EntityNode *entity;
} InterpretationNode__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operator_p",
        .dataTypeSpecific.clazz = GPBObjCClass(OperatorNode),
        .number = InterpretationNode_FieldNumber_Operator_p,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(InterpretationNode__storage_, operator_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "intent",
        .dataTypeSpecific.clazz = GPBObjCClass(IntentNode),
        .number = InterpretationNode_FieldNumber_Intent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(InterpretationNode__storage_, intent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "entity",
        .dataTypeSpecific.clazz = GPBObjCClass(EntityNode),
        .number = InterpretationNode_FieldNumber_Entity,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(InterpretationNode__storage_, entity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InterpretationNode class]
                                     rootClass:[MultiIntentInterpretationRoot class]
                                          file:MultiIntentInterpretationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InterpretationNode__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "interpretationNodeUnion",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void InterpretationNode_ClearInterpretationNodeUnionOneOfCase(InterpretationNode *message) {
  GPBDescriptor *descriptor = [InterpretationNode descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - OperatorNode

@implementation OperatorNode

@dynamic operator_p;
@dynamic hasTextRange, textRange;
@dynamic childrenArray, childrenArray_Count;
@dynamic literal;
@dynamic sensitive;
@dynamic formattedLiteral;
@dynamic hasFormattedTextRange, formattedTextRange;
@dynamic metadata, metadata_Count;
@dynamic hasAudioRange, audioRange;

typedef struct OperatorNode__storage_ {
  uint32_t _has_storage_[1];
  EnumOperator operator_p;
  TextRange *textRange;
  NSMutableArray *childrenArray;
  NSString *literal;
  NSString *formattedLiteral;
  TextRange *formattedTextRange;
  NSMutableDictionary *metadata;
  AudioRange *audioRange;
} OperatorNode__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "operator_p",
        .dataTypeSpecific.enumDescFunc = EnumOperator_EnumDescriptor,
        .number = OperatorNode_FieldNumber_Operator_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OperatorNode__storage_, operator_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "textRange",
        .dataTypeSpecific.clazz = GPBObjCClass(TextRange),
        .number = OperatorNode_FieldNumber_TextRange,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OperatorNode__storage_, textRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "childrenArray",
        .dataTypeSpecific.clazz = GPBObjCClass(InterpretationNode),
        .number = OperatorNode_FieldNumber_ChildrenArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OperatorNode__storage_, childrenArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "literal",
        .dataTypeSpecific.clazz = Nil,
        .number = OperatorNode_FieldNumber_Literal,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OperatorNode__storage_, literal),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sensitive",
        .dataTypeSpecific.clazz = Nil,
        .number = OperatorNode_FieldNumber_Sensitive,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "formattedLiteral",
        .dataTypeSpecific.clazz = Nil,
        .number = OperatorNode_FieldNumber_FormattedLiteral,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OperatorNode__storage_, formattedLiteral),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "formattedTextRange",
        .dataTypeSpecific.clazz = GPBObjCClass(TextRange),
        .number = OperatorNode_FieldNumber_FormattedTextRange,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OperatorNode__storage_, formattedTextRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = OperatorNode_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OperatorNode__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioRange",
        .dataTypeSpecific.clazz = GPBObjCClass(AudioRange),
        .number = OperatorNode_FieldNumber_AudioRange,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OperatorNode__storage_, audioRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OperatorNode class]
                                     rootClass:[MultiIntentInterpretationRoot class]
                                          file:MultiIntentInterpretationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OperatorNode__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OperatorNode_Operator_p_RawValue(OperatorNode *message) {
  GPBDescriptor *descriptor = [OperatorNode descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OperatorNode_FieldNumber_Operator_p];
  return GPBGetMessageRawEnumField(message, field);
}

void SetOperatorNode_Operator_p_RawValue(OperatorNode *message, int32_t value) {
  GPBDescriptor *descriptor = [OperatorNode descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OperatorNode_FieldNumber_Operator_p];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - IntentNode

@implementation IntentNode

@dynamic name;
@dynamic hasTextRange, textRange;
@dynamic confidence;
@dynamic origin;
@dynamic childrenArray, childrenArray_Count;
@dynamic literal;
@dynamic sensitive;
@dynamic formattedLiteral;
@dynamic hasFormattedTextRange, formattedTextRange;
@dynamic metadata, metadata_Count;
@dynamic hasAudioRange, audioRange;

typedef struct IntentNode__storage_ {
  uint32_t _has_storage_[1];
  float confidence;
  EnumOrigin origin;
  NSString *name;
  TextRange *textRange;
  NSMutableArray *childrenArray;
  NSString *literal;
  NSString *formattedLiteral;
  TextRange *formattedTextRange;
  NSMutableDictionary *metadata;
  AudioRange *audioRange;
} IntentNode__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = IntentNode_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IntentNode__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "textRange",
        .dataTypeSpecific.clazz = GPBObjCClass(TextRange),
        .number = IntentNode_FieldNumber_TextRange,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IntentNode__storage_, textRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confidence",
        .dataTypeSpecific.clazz = Nil,
        .number = IntentNode_FieldNumber_Confidence,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IntentNode__storage_, confidence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "origin",
        .dataTypeSpecific.enumDescFunc = EnumOrigin_EnumDescriptor,
        .number = IntentNode_FieldNumber_Origin,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IntentNode__storage_, origin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "childrenArray",
        .dataTypeSpecific.clazz = GPBObjCClass(InterpretationNode),
        .number = IntentNode_FieldNumber_ChildrenArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IntentNode__storage_, childrenArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "literal",
        .dataTypeSpecific.clazz = Nil,
        .number = IntentNode_FieldNumber_Literal,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IntentNode__storage_, literal),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sensitive",
        .dataTypeSpecific.clazz = Nil,
        .number = IntentNode_FieldNumber_Sensitive,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "formattedLiteral",
        .dataTypeSpecific.clazz = Nil,
        .number = IntentNode_FieldNumber_FormattedLiteral,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(IntentNode__storage_, formattedLiteral),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "formattedTextRange",
        .dataTypeSpecific.clazz = GPBObjCClass(TextRange),
        .number = IntentNode_FieldNumber_FormattedTextRange,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(IntentNode__storage_, formattedTextRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = IntentNode_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IntentNode__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioRange",
        .dataTypeSpecific.clazz = GPBObjCClass(AudioRange),
        .number = IntentNode_FieldNumber_AudioRange,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(IntentNode__storage_, audioRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IntentNode class]
                                     rootClass:[MultiIntentInterpretationRoot class]
                                          file:MultiIntentInterpretationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IntentNode__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t IntentNode_Origin_RawValue(IntentNode *message) {
  GPBDescriptor *descriptor = [IntentNode descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IntentNode_FieldNumber_Origin];
  return GPBGetMessageRawEnumField(message, field);
}

void SetIntentNode_Origin_RawValue(IntentNode *message, int32_t value) {
  GPBDescriptor *descriptor = [IntentNode descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IntentNode_FieldNumber_Origin];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - EntityNode

@implementation EntityNode

@dynamic valueUnionOneOfCase;
@dynamic name;
@dynamic hasTextRange, textRange;
@dynamic confidence;
@dynamic origin;
@dynamic childrenArray, childrenArray_Count;
@dynamic stringValue;
@dynamic structValue;
@dynamic literal;
@dynamic sensitive;
@dynamic formattedLiteral;
@dynamic hasFormattedTextRange, formattedTextRange;
@dynamic metadata, metadata_Count;
@dynamic hasAudioRange, audioRange;

typedef struct EntityNode__storage_ {
  uint32_t _has_storage_[2];
  float confidence;
  EnumOrigin origin;
  NSString *name;
  TextRange *textRange;
  NSMutableArray *childrenArray;
  NSString *stringValue;
  GPBStruct *structValue;
  NSString *literal;
  NSString *formattedLiteral;
  TextRange *formattedTextRange;
  NSMutableDictionary *metadata;
  AudioRange *audioRange;
} EntityNode__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = EntityNode_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EntityNode__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "textRange",
        .dataTypeSpecific.clazz = GPBObjCClass(TextRange),
        .number = EntityNode_FieldNumber_TextRange,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EntityNode__storage_, textRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confidence",
        .dataTypeSpecific.clazz = Nil,
        .number = EntityNode_FieldNumber_Confidence,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EntityNode__storage_, confidence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "origin",
        .dataTypeSpecific.enumDescFunc = EnumOrigin_EnumDescriptor,
        .number = EntityNode_FieldNumber_Origin,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EntityNode__storage_, origin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "childrenArray",
        .dataTypeSpecific.clazz = GPBObjCClass(InterpretationNode),
        .number = EntityNode_FieldNumber_ChildrenArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EntityNode__storage_, childrenArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stringValue",
        .dataTypeSpecific.clazz = Nil,
        .number = EntityNode_FieldNumber_StringValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(EntityNode__storage_, stringValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "structValue",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStruct),
        .number = EntityNode_FieldNumber_StructValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(EntityNode__storage_, structValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "literal",
        .dataTypeSpecific.clazz = Nil,
        .number = EntityNode_FieldNumber_Literal,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(EntityNode__storage_, literal),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sensitive",
        .dataTypeSpecific.clazz = Nil,
        .number = EntityNode_FieldNumber_Sensitive,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "formattedLiteral",
        .dataTypeSpecific.clazz = Nil,
        .number = EntityNode_FieldNumber_FormattedLiteral,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(EntityNode__storage_, formattedLiteral),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "formattedTextRange",
        .dataTypeSpecific.clazz = GPBObjCClass(TextRange),
        .number = EntityNode_FieldNumber_FormattedTextRange,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(EntityNode__storage_, formattedTextRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = EntityNode_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EntityNode__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioRange",
        .dataTypeSpecific.clazz = GPBObjCClass(AudioRange),
        .number = EntityNode_FieldNumber_AudioRange,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(EntityNode__storage_, audioRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EntityNode class]
                                     rootClass:[MultiIntentInterpretationRoot class]
                                          file:MultiIntentInterpretationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EntityNode__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "valueUnion",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t EntityNode_Origin_RawValue(EntityNode *message) {
  GPBDescriptor *descriptor = [EntityNode descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EntityNode_FieldNumber_Origin];
  return GPBGetMessageRawEnumField(message, field);
}

void SetEntityNode_Origin_RawValue(EntityNode *message, int32_t value) {
  GPBDescriptor *descriptor = [EntityNode descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EntityNode_FieldNumber_Origin];
  GPBSetMessageRawEnumField(message, field, value);
}

void EntityNode_ClearValueUnionOneOfCase(EntityNode *message) {
  GPBDescriptor *descriptor = [EntityNode descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
