// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: multi-intent-interpretation.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class AudioRange;
@class EntityNode;
@class GPBAny;
@class GPBStruct;
@class IntentNode;
@class InterpretationNode;
@class OperatorNode;
@class TextRange;
GPB_ENUM_FWD_DECLARE(EnumOrigin);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum EnumOperator

/**
 * *
 * Logical operator type, AND, OR, or NOT. Included in [OperatorNode](#operatornode).
 **/
typedef GPB_ENUM(EnumOperator) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  EnumOperator_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** The following item is an additional intent or entity. */
  EnumOperator_And = 0,

  /** The following item is an alternative intent or entity. */
  EnumOperator_Or = 1,

  /** The following item is not detected. */
  EnumOperator_Not = 2,
};

GPBEnumDescriptor *EnumOperator_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL EnumOperator_IsValidValue(int32_t value);

#pragma mark - MultiIntentInterpretationRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface MultiIntentInterpretationRoot : GPBRootObject
@end

#pragma mark - MultiIntentInterpretation

typedef GPB_ENUM(MultiIntentInterpretation_FieldNumber) {
  MultiIntentInterpretation_FieldNumber_Root = 1,
  MultiIntentInterpretation_FieldNumber_Metadata = 13,
};

/**
 * *
 * Multi-intent interpretation. Contains a tree of nodes representing
 * the detected operators, intents, and entities and their
 * associations. Included in [Interpretation](#interpretation).
 **/
GPB_FINAL @interface MultiIntentInterpretation : GPBMessage

/** Root node of the interpretation tree. Can be either [OperatorNode](#operatornode) or [IntentNode](#intentnode). */
@property(nonatomic, readwrite, strong, null_resettable) InterpretationNode *root;
/** Test to see if @c root has been set. */
@property(nonatomic, readwrite) BOOL hasRoot;

/** Optional metadata attached to this interpretation. For internal use only. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, GPBAny*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

@end

#pragma mark - InterpretationNode

typedef GPB_ENUM(InterpretationNode_FieldNumber) {
  InterpretationNode_FieldNumber_Operator_p = 1,
  InterpretationNode_FieldNumber_Intent = 2,
  InterpretationNode_FieldNumber_Entity = 3,
};

typedef GPB_ENUM(InterpretationNode_InterpretationNodeUnion_OneOfCase) {
  InterpretationNode_InterpretationNodeUnion_OneOfCase_GPBUnsetOneOfCase = 0,
  InterpretationNode_InterpretationNodeUnion_OneOfCase_Operator_p = 1,
  InterpretationNode_InterpretationNodeUnion_OneOfCase_Intent = 2,
  InterpretationNode_InterpretationNodeUnion_OneOfCase_Entity = 3,
};

/**
 * *
 * Node in the interpretation tree. Included in
 * [MultiIntentInterpretation](#multiintentinterpretation).
 **/
GPB_FINAL @interface InterpretationNode : GPBMessage

@property(nonatomic, readonly) InterpretationNode_InterpretationNodeUnion_OneOfCase interpretationNodeUnionOneOfCase;

/** The relationship of the intents or entities. */
@property(nonatomic, readwrite, strong, null_resettable) OperatorNode *operator_p;

/** The intents detected in the user input. */
@property(nonatomic, readwrite, strong, null_resettable) IntentNode *intent;

/** The entities in the intent. */
@property(nonatomic, readwrite, strong, null_resettable) EntityNode *entity;

@end

/**
 * Clears whatever value was set for the oneof 'interpretationNodeUnion'.
 **/
void InterpretationNode_ClearInterpretationNodeUnionOneOfCase(InterpretationNode *message);

#pragma mark - OperatorNode

typedef GPB_ENUM(OperatorNode_FieldNumber) {
  OperatorNode_FieldNumber_Operator_p = 1,
  OperatorNode_FieldNumber_TextRange = 2,
  OperatorNode_FieldNumber_ChildrenArray = 5,
  OperatorNode_FieldNumber_Literal = 8,
  OperatorNode_FieldNumber_Sensitive = 9,
  OperatorNode_FieldNumber_FormattedLiteral = 11,
  OperatorNode_FieldNumber_FormattedTextRange = 12,
  OperatorNode_FieldNumber_Metadata = 13,
  OperatorNode_FieldNumber_AudioRange = 15,
};

/**
 * *
 * Logical operator node.  Included in [InterpretationNode](#interpretationnode).
 **/
GPB_FINAL @interface OperatorNode : GPBMessage

/** Type of operator. */
@property(nonatomic, readwrite) EnumOperator operator_p;

/** Range of the literal text this operator applies to. */
@property(nonatomic, readwrite, strong, null_resettable) TextRange *textRange;
/** Test to see if @c textRange has been set. */
@property(nonatomic, readwrite) BOOL hasTextRange;

/** Repeated. Child nodes for this operator. An operator node always has children. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<InterpretationNode*> *childrenArray;
/** The number of items in @c childrenArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger childrenArray_Count;

/** The input literal associated with this operator. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *literal;

/** Indicates whether a child entity of this operator node has been flagged as sensitive. */
@property(nonatomic, readwrite) BOOL sensitive;

/** The input formatted literal associated with this operator. When InterpretationInput is text, it's the same as literal. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *formattedLiteral;

/** Range of the formatted literal text this operator applies to. When InterpretationInput is ASR result, it may be absent in misalignments cases. */
@property(nonatomic, readwrite, strong, null_resettable) TextRange *formattedTextRange;
/** Test to see if @c formattedTextRange has been set. */
@property(nonatomic, readwrite) BOOL hasFormattedTextRange;

/** Optional metadata attached to this node. For internal use only. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, GPBAny*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

/** Range of audio input this operator applies to. Available only when interpreting a recognition result from ASR as a Service. */
@property(nonatomic, readwrite, strong, null_resettable) AudioRange *audioRange;
/** Test to see if @c audioRange has been set. */
@property(nonatomic, readwrite) BOOL hasAudioRange;

@end

/**
 * Fetches the raw value of a @c OperatorNode's @c operator_p property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t OperatorNode_Operator_p_RawValue(OperatorNode *message);
/**
 * Sets the raw value of an @c OperatorNode's @c operator_p property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetOperatorNode_Operator_p_RawValue(OperatorNode *message, int32_t value);

#pragma mark - IntentNode

typedef GPB_ENUM(IntentNode_FieldNumber) {
  IntentNode_FieldNumber_Name = 1,
  IntentNode_FieldNumber_TextRange = 2,
  IntentNode_FieldNumber_Confidence = 3,
  IntentNode_FieldNumber_Origin = 4,
  IntentNode_FieldNumber_ChildrenArray = 5,
  IntentNode_FieldNumber_Literal = 8,
  IntentNode_FieldNumber_Sensitive = 9,
  IntentNode_FieldNumber_FormattedLiteral = 11,
  IntentNode_FieldNumber_FormattedTextRange = 12,
  IntentNode_FieldNumber_Metadata = 13,
  IntentNode_FieldNumber_AudioRange = 15,
};

/**
 * *
 * Node representing an intent. Included in [InterpretationNode](#interpretationnode).
 **/
GPB_FINAL @interface IntentNode : GPBMessage

/** Intent name as specified in the semantic model. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** Range of literal text this intent applies to. */
@property(nonatomic, readwrite, strong, null_resettable) TextRange *textRange;
/** Test to see if @c textRange has been set. */
@property(nonatomic, readwrite) BOOL hasTextRange;

/** Confidence score between 0.0 and 1.0 inclusive. The higher the score, the likelier the detected intent is correct. */
@property(nonatomic, readwrite) float confidence;

/** How the intent was detected. */
@property(nonatomic, readwrite) enum EnumOrigin origin;

/** Repeated. Child nodes for this intent. An intent node has zero or more child nodes. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<InterpretationNode*> *childrenArray;
/** The number of items in @c childrenArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger childrenArray_Count;

/** The input literal associated with this intent. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *literal;

/** Indicates whether a child entity of this intent node has been flagged as sensitive. */
@property(nonatomic, readwrite) BOOL sensitive;

/** The input formatted literal associated with this intent. When InterpretationInput is text, it's the same as literal. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *formattedLiteral;

/** Range of the formatted literal text this intent applies to. When InterpretationInput is ASR, it may be absent in misalignments cases. */
@property(nonatomic, readwrite, strong, null_resettable) TextRange *formattedTextRange;
/** Test to see if @c formattedTextRange has been set. */
@property(nonatomic, readwrite) BOOL hasFormattedTextRange;

/** Optional metadata attached to this node. For internal use only. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, GPBAny*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

/** Range of audio input this intent applies to. Available only when interpreting a recognition result from ASR as a Service. */
@property(nonatomic, readwrite, strong, null_resettable) AudioRange *audioRange;
/** Test to see if @c audioRange has been set. */
@property(nonatomic, readwrite) BOOL hasAudioRange;

@end

/**
 * Fetches the raw value of a @c IntentNode's @c origin property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t IntentNode_Origin_RawValue(IntentNode *message);
/**
 * Sets the raw value of an @c IntentNode's @c origin property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetIntentNode_Origin_RawValue(IntentNode *message, int32_t value);

#pragma mark - EntityNode

typedef GPB_ENUM(EntityNode_FieldNumber) {
  EntityNode_FieldNumber_Name = 1,
  EntityNode_FieldNumber_TextRange = 2,
  EntityNode_FieldNumber_Confidence = 3,
  EntityNode_FieldNumber_Origin = 4,
  EntityNode_FieldNumber_ChildrenArray = 5,
  EntityNode_FieldNumber_StringValue = 6,
  EntityNode_FieldNumber_StructValue = 7,
  EntityNode_FieldNumber_Literal = 8,
  EntityNode_FieldNumber_Sensitive = 9,
  EntityNode_FieldNumber_FormattedLiteral = 11,
  EntityNode_FieldNumber_FormattedTextRange = 12,
  EntityNode_FieldNumber_Metadata = 13,
  EntityNode_FieldNumber_AudioRange = 15,
};

typedef GPB_ENUM(EntityNode_ValueUnion_OneOfCase) {
  EntityNode_ValueUnion_OneOfCase_GPBUnsetOneOfCase = 0,
  EntityNode_ValueUnion_OneOfCase_StringValue = 6,
  EntityNode_ValueUnion_OneOfCase_StructValue = 7,
};

/**
 * *
 * Node representing an entity. Included in [InterpretationNode](#interpretationnode).
 **/
GPB_FINAL @interface EntityNode : GPBMessage

/** Entity name as specified in the semantic model. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** Range of literal text this intent applies to. */
@property(nonatomic, readwrite, strong, null_resettable) TextRange *textRange;
/** Test to see if @c textRange has been set. */
@property(nonatomic, readwrite) BOOL hasTextRange;

/** Confidence score between 0.0 and 1.0 inclusive. The higher the score, the likelier the detected entity is correct. */
@property(nonatomic, readwrite) float confidence;

/** How the intent was detected. */
@property(nonatomic, readwrite) enum EnumOrigin origin;

/** Repeated. Child nodes for this entity. A hierarchical entity node can have child entity and operator nodes. Entity nodes currently never have intent nodes as children. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<InterpretationNode*> *childrenArray;
/** The number of items in @c childrenArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger childrenArray_Count;

@property(nonatomic, readonly) EntityNode_ValueUnion_OneOfCase valueUnionOneOfCase;

/** The value of the entity as specified in the semantic model. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *stringValue;

/** Structured data, ready to convert to a JSON representation. */
@property(nonatomic, readwrite, strong, null_resettable) GPBStruct *structValue;

/** The input literal associated with this entity. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *literal;

/** Indicates whether a child entity of this operator node has been flagged as sensitive. */
@property(nonatomic, readwrite) BOOL sensitive;

/** The input formatted literal associated with this entity. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *formattedLiteral;

/** Range of the formatted literal text this entity applies to. When InterpretationInput is ASR, it may be absent in misalignments cases. */
@property(nonatomic, readwrite, strong, null_resettable) TextRange *formattedTextRange;
/** Test to see if @c formattedTextRange has been set. */
@property(nonatomic, readwrite) BOOL hasFormattedTextRange;

/** Optional metadata attached to this node. For internal use only. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, GPBAny*> *metadata;
/** The number of items in @c metadata without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger metadata_Count;

/** Range of audio input this entity applies to. Available only when interpreting a recognition result from ASR as a Service. */
@property(nonatomic, readwrite, strong, null_resettable) AudioRange *audioRange;
/** Test to see if @c audioRange has been set. */
@property(nonatomic, readwrite) BOOL hasAudioRange;

@end

/**
 * Fetches the raw value of a @c EntityNode's @c origin property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t EntityNode_Origin_RawValue(EntityNode *message);
/**
 * Sets the raw value of an @c EntityNode's @c origin property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetEntityNode_Origin_RawValue(EntityNode *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'valueUnion'.
 **/
void EntityNode_ClearValueUnionOneOfCase(EntityNode *message);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
