// Code generated by gRPC proto compiler.  DO NOT EDIT!
// source: dlg_interface.proto

#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
#import "DlgInterface.pbrpc.h"
#import "DlgInterface.pbobjc.h"
#import <ProtoRPC/ProtoRPCLegacy.h>
#import <RxLibrary/GRXWriter+Immediate.h>

#import "google/api/Annotations.pbobjc.h"
#import "DlgMessages.pbobjc.h"

@implementation DLGDialogService

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wobjc-designated-initializers"

// Designated initializer
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [super initWithHost:host
                 packageName:@"nuance.dlg.v1"
                 serviceName:@"DialogService"
                 callOptions:callOptions];
}

- (instancetype)initWithHost:(NSString *)host {
  return [super initWithHost:host
                 packageName:@"nuance.dlg.v1"
                 serviceName:@"DialogService"];
}

#pragma clang diagnostic pop

// Override superclass initializer to disallow different package and service names.
- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName {
  return [self initWithHost:host];
}

- (instancetype)initWithHost:(NSString *)host
                 packageName:(NSString *)packageName
                 serviceName:(NSString *)serviceName
                 callOptions:(GRPCCallOptions *)callOptions {
  return [self initWithHost:host callOptions:callOptions];
}

#pragma mark - Class Methods

+ (instancetype)serviceWithHost:(NSString *)host {
  return [[self alloc] initWithHost:host];
}

+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [[self alloc] initWithHost:host callOptions:callOptions];
}

#pragma mark - Method Implementations

#pragma mark Start(StartRequest) returns (StartResponse)

/**
 * Starts a conversation.
 * Returns a **StartResponse** object.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)startWithRequest:(DLGStartRequest *)request handler:(void(^)(DLGStartResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToStartWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Starts a conversation.
 * Returns a **StartResponse** object.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToStartWithRequest:(DLGStartRequest *)request handler:(void(^)(DLGStartResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"Start"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[DLGStartResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Starts a conversation.
 * Returns a **StartResponse** object.
 */
- (GRPCUnaryProtoCall *)startWithMessage:(DLGStartRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"Start"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[DLGStartResponse class]];
}

#pragma mark Update(UpdateRequest) returns (UpdateResponse)

/**
 * Updates the state of a session without advancing the conversation.
 * Returns a **UpdateResponse** object.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)updateWithRequest:(DLGUpdateRequest *)request handler:(void(^)(DLGUpdateResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToUpdateWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Updates the state of a session without advancing the conversation.
 * Returns a **UpdateResponse** object.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToUpdateWithRequest:(DLGUpdateRequest *)request handler:(void(^)(DLGUpdateResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"Update"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[DLGUpdateResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Updates the state of a session without advancing the conversation.
 * Returns a **UpdateResponse** object.
 */
- (GRPCUnaryProtoCall *)updateWithMessage:(DLGUpdateRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"Update"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[DLGUpdateResponse class]];
}

#pragma mark Execute(ExecuteRequest) returns (ExecuteResponse)

/**
 * Used to continuously interact with the conversation based on end user input or events.
 * Returns an **ExecuteResponse** object that will contain data related to the dialog interactions and that can be 
 * used by the client to interact with the end user.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)executeWithRequest:(DLGExecuteRequest *)request handler:(void(^)(DLGExecuteResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToExecuteWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Used to continuously interact with the conversation based on end user input or events.
 * Returns an **ExecuteResponse** object that will contain data related to the dialog interactions and that can be 
 * used by the client to interact with the end user.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToExecuteWithRequest:(DLGExecuteRequest *)request handler:(void(^)(DLGExecuteResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"Execute"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[DLGExecuteResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Used to continuously interact with the conversation based on end user input or events.
 * Returns an **ExecuteResponse** object that will contain data related to the dialog interactions and that can be 
 * used by the client to interact with the end user.
 */
- (GRPCUnaryProtoCall *)executeWithMessage:(DLGExecuteRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"Execute"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[DLGExecuteResponse class]];
}

#pragma mark ExecuteStream(stream StreamInput) returns (stream StreamOutput)

/**
 * Performs recognition on streamed audio using ASRaaS and provides speech synthesis using TTSaaS.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)executeStreamWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, DLGStreamOutput *_Nullable response, NSError *_Nullable error))eventHandler{
  [[self RPCToExecuteStreamWithRequestsWriter:requestWriter eventHandler:eventHandler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Performs recognition on streamed audio using ASRaaS and provides speech synthesis using TTSaaS.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToExecuteStreamWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, DLGStreamOutput *_Nullable response, NSError *_Nullable error))eventHandler{
  return [self RPCToMethod:@"ExecuteStream"
            requestsWriter:requestWriter
             responseClass:[DLGStreamOutput class]
        responsesWriteable:[GRXWriteable writeableWithEventHandler:eventHandler]];
}
/**
 * Performs recognition on streamed audio using ASRaaS and provides speech synthesis using TTSaaS.
 */
- (GRPCStreamingProtoCall *)executeStreamWithResponseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"ExecuteStream"
           responseHandler:handler
               callOptions:callOptions
             responseClass:[DLGStreamOutput class]];
}

#pragma mark Stop(StopRequest) returns (StopResponse)

/**
 * Ends a conversation and performs cleanup.
 * Returns a **StopResponse** object.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)stopWithRequest:(DLGStopRequest *)request handler:(void(^)(DLGStopResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToStopWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Ends a conversation and performs cleanup.
 * Returns a **StopResponse** object.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToStopWithRequest:(DLGStopRequest *)request handler:(void(^)(DLGStopResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"Stop"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[DLGStopResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Ends a conversation and performs cleanup.
 * Returns a **StopResponse** object.
 */
- (GRPCUnaryProtoCall *)stopWithMessage:(DLGStopRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"Stop"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[DLGStopResponse class]];
}

#pragma mark Status(StatusRequest) returns (StatusResponse)

/**
 * Returns the status of a session. Returns grpc status 0 (OK) if found, 5 (NOT_FOUND) if no session was found
 * Returns a **StatusResponse** object.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)statusWithRequest:(DLGStatusRequest *)request handler:(void(^)(DLGStatusResponse *_Nullable response, NSError *_Nullable error))handler{
  [[self RPCToStatusWithRequest:request handler:handler] start];
}
// Returns a not-yet-started RPC object.
/**
 * Returns the status of a session. Returns grpc status 0 (OK) if found, 5 (NOT_FOUND) if no session was found
 * Returns a **StatusResponse** object.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToStatusWithRequest:(DLGStatusRequest *)request handler:(void(^)(DLGStatusResponse *_Nullable response, NSError *_Nullable error))handler{
  return [self RPCToMethod:@"Status"
            requestsWriter:[GRXWriter writerWithValue:request]
             responseClass:[DLGStatusResponse class]
        responsesWriteable:[GRXWriteable writeableWithSingleHandler:handler]];
}
/**
 * Returns the status of a session. Returns grpc status 0 (OK) if found, 5 (NOT_FOUND) if no session was found
 * Returns a **StatusResponse** object.
 */
- (GRPCUnaryProtoCall *)statusWithMessage:(DLGStatusRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions {
  return [self RPCToMethod:@"Status"
                   message:message
           responseHandler:handler
               callOptions:callOptions
             responseClass:[DLGStatusResponse class]];
}

@end
#endif
