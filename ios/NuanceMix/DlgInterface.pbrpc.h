// Code generated by gRPC proto compiler.  DO NOT EDIT!
// source: dlg_interface.proto

#import <Foundation/Foundation.h>

#if !defined(GPB_GRPC_FORWARD_DECLARE_MESSAGE_PROTO) || !GPB_GRPC_FORWARD_DECLARE_MESSAGE_PROTO
#import "DlgInterface.pbobjc.h"
#endif

#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
#import <ProtoRPC/ProtoService.h>
#import <ProtoRPC/ProtoRPCLegacy.h>
#import <RxLibrary/GRXWriteable.h>
#import <RxLibrary/GRXWriter.h>
#endif

@class DLGExecuteRequest;
@class DLGExecuteResponse;
@class DLGStartRequest;
@class DLGStartResponse;
@class DLGStatusRequest;
@class DLGStatusResponse;
@class DLGStopRequest;
@class DLGStopResponse;
@class DLGStreamInput;
@class DLGStreamOutput;
@class DLGUpdateRequest;
@class DLGUpdateResponse;

#if !defined(GPB_GRPC_FORWARD_DECLARE_MESSAGE_PROTO) || !GPB_GRPC_FORWARD_DECLARE_MESSAGE_PROTO
  #import "google/api/Annotations.pbobjc.h"
  #import "DlgMessages.pbobjc.h"
#endif

@class GRPCUnaryProtoCall;
@class GRPCStreamingProtoCall;
@class GRPCCallOptions;
@protocol GRPCProtoResponseHandler;
@class GRPCProtoCall;


NS_ASSUME_NONNULL_BEGIN

@protocol DLGDialogService2 <NSObject>

#pragma mark Start(StartRequest) returns (StartResponse)

/**
 * Starts a conversation.
 * Returns a **StartResponse** object.
 */
- (GRPCUnaryProtoCall *)startWithMessage:(DLGStartRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark Update(UpdateRequest) returns (UpdateResponse)

/**
 * Updates the state of a session without advancing the conversation.
 * Returns a **UpdateResponse** object.
 */
- (GRPCUnaryProtoCall *)updateWithMessage:(DLGUpdateRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark Execute(ExecuteRequest) returns (ExecuteResponse)

/**
 * Used to continuously interact with the conversation based on end user input or events.
 * Returns an **ExecuteResponse** object that will contain data related to the dialog interactions and that can be 
 * used by the client to interact with the end user.
 */
- (GRPCUnaryProtoCall *)executeWithMessage:(DLGExecuteRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark ExecuteStream(stream StreamInput) returns (stream StreamOutput)

/**
 * Performs recognition on streamed audio using ASRaaS and provides speech synthesis using TTSaaS.
 */
- (GRPCStreamingProtoCall *)executeStreamWithResponseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark Stop(StopRequest) returns (StopResponse)

/**
 * Ends a conversation and performs cleanup.
 * Returns a **StopResponse** object.
 */
- (GRPCUnaryProtoCall *)stopWithMessage:(DLGStopRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

#pragma mark Status(StatusRequest) returns (StatusResponse)

/**
 * Returns the status of a session. Returns grpc status 0 (OK) if found, 5 (NOT_FOUND) if no session was found
 * Returns a **StatusResponse** object.
 */
- (GRPCUnaryProtoCall *)statusWithMessage:(DLGStatusRequest *)message responseHandler:(id<GRPCProtoResponseHandler>)handler callOptions:(GRPCCallOptions *_Nullable)callOptions;

@end

/**
 * The methods in this protocol belong to a set of old APIs that have been deprecated. They do not
 * recognize call options provided in the initializer. Using the v2 protocol is recommended.
 */
@protocol DLGDialogService <NSObject>

#pragma mark Start(StartRequest) returns (StartResponse)

/**
 * Starts a conversation.
 * Returns a **StartResponse** object.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)startWithRequest:(DLGStartRequest *)request handler:(void(^)(DLGStartResponse *_Nullable response, NSError *_Nullable error))handler;

/**
 * Starts a conversation.
 * Returns a **StartResponse** object.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToStartWithRequest:(DLGStartRequest *)request handler:(void(^)(DLGStartResponse *_Nullable response, NSError *_Nullable error))handler;


#pragma mark Update(UpdateRequest) returns (UpdateResponse)

/**
 * Updates the state of a session without advancing the conversation.
 * Returns a **UpdateResponse** object.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)updateWithRequest:(DLGUpdateRequest *)request handler:(void(^)(DLGUpdateResponse *_Nullable response, NSError *_Nullable error))handler;

/**
 * Updates the state of a session without advancing the conversation.
 * Returns a **UpdateResponse** object.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToUpdateWithRequest:(DLGUpdateRequest *)request handler:(void(^)(DLGUpdateResponse *_Nullable response, NSError *_Nullable error))handler;


#pragma mark Execute(ExecuteRequest) returns (ExecuteResponse)

/**
 * Used to continuously interact with the conversation based on end user input or events.
 * Returns an **ExecuteResponse** object that will contain data related to the dialog interactions and that can be 
 * used by the client to interact with the end user.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)executeWithRequest:(DLGExecuteRequest *)request handler:(void(^)(DLGExecuteResponse *_Nullable response, NSError *_Nullable error))handler;

/**
 * Used to continuously interact with the conversation based on end user input or events.
 * Returns an **ExecuteResponse** object that will contain data related to the dialog interactions and that can be 
 * used by the client to interact with the end user.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToExecuteWithRequest:(DLGExecuteRequest *)request handler:(void(^)(DLGExecuteResponse *_Nullable response, NSError *_Nullable error))handler;


#pragma mark ExecuteStream(stream StreamInput) returns (stream StreamOutput)

/**
 * Performs recognition on streamed audio using ASRaaS and provides speech synthesis using TTSaaS.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)executeStreamWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, DLGStreamOutput *_Nullable response, NSError *_Nullable error))eventHandler;

/**
 * Performs recognition on streamed audio using ASRaaS and provides speech synthesis using TTSaaS.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToExecuteStreamWithRequestsWriter:(GRXWriter *)requestWriter eventHandler:(void(^)(BOOL done, DLGStreamOutput *_Nullable response, NSError *_Nullable error))eventHandler;


#pragma mark Stop(StopRequest) returns (StopResponse)

/**
 * Ends a conversation and performs cleanup.
 * Returns a **StopResponse** object.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)stopWithRequest:(DLGStopRequest *)request handler:(void(^)(DLGStopResponse *_Nullable response, NSError *_Nullable error))handler;

/**
 * Ends a conversation and performs cleanup.
 * Returns a **StopResponse** object.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToStopWithRequest:(DLGStopRequest *)request handler:(void(^)(DLGStopResponse *_Nullable response, NSError *_Nullable error))handler;


#pragma mark Status(StatusRequest) returns (StatusResponse)

/**
 * Returns the status of a session. Returns grpc status 0 (OK) if found, 5 (NOT_FOUND) if no session was found
 * Returns a **StatusResponse** object.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (void)statusWithRequest:(DLGStatusRequest *)request handler:(void(^)(DLGStatusResponse *_Nullable response, NSError *_Nullable error))handler;

/**
 * Returns the status of a session. Returns grpc status 0 (OK) if found, 5 (NOT_FOUND) if no session was found
 * Returns a **StatusResponse** object.
 *
 * This method belongs to a set of APIs that have been deprecated. Using the v2 API is recommended.
 */
- (GRPCProtoCall *)RPCToStatusWithRequest:(DLGStatusRequest *)request handler:(void(^)(DLGStatusResponse *_Nullable response, NSError *_Nullable error))handler;


@end


#if !defined(GPB_GRPC_PROTOCOL_ONLY) || !GPB_GRPC_PROTOCOL_ONLY
/**
 * Basic service implementation, over gRPC, that only does
 * marshalling and parsing.
 */
@interface DLGDialogService : GRPCProtoService<DLGDialogService2, DLGDialogService>
- (instancetype)initWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions NS_DESIGNATED_INITIALIZER;
+ (instancetype)serviceWithHost:(NSString *)host callOptions:(GRPCCallOptions *_Nullable)callOptions;
// The following methods belong to a set of old APIs that have been deprecated.
- (instancetype)initWithHost:(NSString *)host;
+ (instancetype)serviceWithHost:(NSString *)host;
@end
#endif

NS_ASSUME_NONNULL_END

