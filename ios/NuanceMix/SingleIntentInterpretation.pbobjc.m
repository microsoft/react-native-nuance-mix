// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: single-intent-interpretation.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "SingleIntentInterpretation.pbobjc.h"
#import "InterpretationCommon.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AudioRange);
GPBObjCClassDeclaration(GPBAny);
GPBObjCClassDeclaration(GPBStruct);
GPBObjCClassDeclaration(SingleIntentEntity);
GPBObjCClassDeclaration(SingleIntentEntityList);
GPBObjCClassDeclaration(SingleIntentInterpretation);
GPBObjCClassDeclaration(TextRange);

#pragma mark - SingleIntentInterpretationRoot

@implementation SingleIntentInterpretationRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - SingleIntentInterpretationRoot_FileDescriptor

static GPBFileDescriptor *SingleIntentInterpretationRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"nuance.nlu.v1"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SingleIntentInterpretation

@implementation SingleIntentInterpretation

@dynamic intent;
@dynamic confidence;
@dynamic origin;
@dynamic entities, entities_Count;
@dynamic metadata, metadata_Count;

typedef struct SingleIntentInterpretation__storage_ {
  uint32_t _has_storage_[1];
  float confidence;
  EnumOrigin origin;
  NSString *intent;
  NSMutableDictionary *entities;
  NSMutableDictionary *metadata;
} SingleIntentInterpretation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "intent",
        .dataTypeSpecific.clazz = Nil,
        .number = SingleIntentInterpretation_FieldNumber_Intent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SingleIntentInterpretation__storage_, intent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "confidence",
        .dataTypeSpecific.clazz = Nil,
        .number = SingleIntentInterpretation_FieldNumber_Confidence,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SingleIntentInterpretation__storage_, confidence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "origin",
        .dataTypeSpecific.enumDescFunc = EnumOrigin_EnumDescriptor,
        .number = SingleIntentInterpretation_FieldNumber_Origin,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SingleIntentInterpretation__storage_, origin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "entities",
        .dataTypeSpecific.clazz = GPBObjCClass(SingleIntentEntityList),
        .number = SingleIntentInterpretation_FieldNumber_Entities,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SingleIntentInterpretation__storage_, entities),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = SingleIntentInterpretation_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SingleIntentInterpretation__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SingleIntentInterpretation class]
                                     rootClass:[SingleIntentInterpretationRoot class]
                                          file:SingleIntentInterpretationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SingleIntentInterpretation__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SingleIntentInterpretation_Origin_RawValue(SingleIntentInterpretation *message) {
  GPBDescriptor *descriptor = [SingleIntentInterpretation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SingleIntentInterpretation_FieldNumber_Origin];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSingleIntentInterpretation_Origin_RawValue(SingleIntentInterpretation *message, int32_t value) {
  GPBDescriptor *descriptor = [SingleIntentInterpretation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SingleIntentInterpretation_FieldNumber_Origin];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SingleIntentEntityList

@implementation SingleIntentEntityList

@dynamic entitiesArray, entitiesArray_Count;

typedef struct SingleIntentEntityList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *entitiesArray;
} SingleIntentEntityList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "entitiesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(SingleIntentEntity),
        .number = SingleIntentEntityList_FieldNumber_EntitiesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SingleIntentEntityList__storage_, entitiesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SingleIntentEntityList class]
                                     rootClass:[SingleIntentInterpretationRoot class]
                                          file:SingleIntentInterpretationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SingleIntentEntityList__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SingleIntentEntity

@implementation SingleIntentEntity

@dynamic valueUnionOneOfCase;
@dynamic hasTextRange, textRange;
@dynamic confidence;
@dynamic origin;
@dynamic entities, entities_Count;
@dynamic stringValue;
@dynamic structValue;
@dynamic literal;
@dynamic sensitive;
@dynamic formattedLiteral;
@dynamic hasFormattedTextRange, formattedTextRange;
@dynamic metadata, metadata_Count;
@dynamic hasAudioRange, audioRange;

typedef struct SingleIntentEntity__storage_ {
  uint32_t _has_storage_[2];
  float confidence;
  EnumOrigin origin;
  TextRange *textRange;
  NSMutableDictionary *entities;
  NSString *stringValue;
  GPBStruct *structValue;
  NSString *literal;
  NSString *formattedLiteral;
  TextRange *formattedTextRange;
  NSMutableDictionary *metadata;
  AudioRange *audioRange;
} SingleIntentEntity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "textRange",
        .dataTypeSpecific.clazz = GPBObjCClass(TextRange),
        .number = SingleIntentEntity_FieldNumber_TextRange,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SingleIntentEntity__storage_, textRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "confidence",
        .dataTypeSpecific.clazz = Nil,
        .number = SingleIntentEntity_FieldNumber_Confidence,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SingleIntentEntity__storage_, confidence),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "origin",
        .dataTypeSpecific.enumDescFunc = EnumOrigin_EnumDescriptor,
        .number = SingleIntentEntity_FieldNumber_Origin,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SingleIntentEntity__storage_, origin),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "entities",
        .dataTypeSpecific.clazz = GPBObjCClass(SingleIntentEntityList),
        .number = SingleIntentEntity_FieldNumber_Entities,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SingleIntentEntity__storage_, entities),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "stringValue",
        .dataTypeSpecific.clazz = Nil,
        .number = SingleIntentEntity_FieldNumber_StringValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SingleIntentEntity__storage_, stringValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "structValue",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStruct),
        .number = SingleIntentEntity_FieldNumber_StructValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(SingleIntentEntity__storage_, structValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "literal",
        .dataTypeSpecific.clazz = Nil,
        .number = SingleIntentEntity_FieldNumber_Literal,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SingleIntentEntity__storage_, literal),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sensitive",
        .dataTypeSpecific.clazz = Nil,
        .number = SingleIntentEntity_FieldNumber_Sensitive,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "formattedLiteral",
        .dataTypeSpecific.clazz = Nil,
        .number = SingleIntentEntity_FieldNumber_FormattedLiteral,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SingleIntentEntity__storage_, formattedLiteral),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "formattedTextRange",
        .dataTypeSpecific.clazz = GPBObjCClass(TextRange),
        .number = SingleIntentEntity_FieldNumber_FormattedTextRange,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SingleIntentEntity__storage_, formattedTextRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBAny),
        .number = SingleIntentEntity_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SingleIntentEntity__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioRange",
        .dataTypeSpecific.clazz = GPBObjCClass(AudioRange),
        .number = SingleIntentEntity_FieldNumber_AudioRange,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SingleIntentEntity__storage_, audioRange),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SingleIntentEntity class]
                                     rootClass:[SingleIntentInterpretationRoot class]
                                          file:SingleIntentInterpretationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SingleIntentEntity__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "valueUnion",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SingleIntentEntity_Origin_RawValue(SingleIntentEntity *message) {
  GPBDescriptor *descriptor = [SingleIntentEntity descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SingleIntentEntity_FieldNumber_Origin];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSingleIntentEntity_Origin_RawValue(SingleIntentEntity *message, int32_t value) {
  GPBDescriptor *descriptor = [SingleIntentEntity descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SingleIntentEntity_FieldNumber_Origin];
  GPBSetMessageRawEnumField(message, field, value);
}

void SingleIntentEntity_ClearValueUnionOneOfCase(SingleIntentEntity *message) {
  GPBDescriptor *descriptor = [SingleIntentEntity descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
