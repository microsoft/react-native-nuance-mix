// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: status.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Status.pbobjc.h"
#import "StatusCode.pbobjc.h"
#import "ErrorDetails.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(FieldViolation);
GPBObjCClassDeclaration(HelpInfo);
GPBObjCClassDeclaration(LocalizedMessage);
GPBObjCClassDeclaration(RequestInfo);
GPBObjCClassDeclaration(RetryInfo);
GPBObjCClassDeclaration(StatusDetail);

#pragma mark - StatusRoot

@implementation StatusRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - StatusRoot_FileDescriptor

static GPBFileDescriptor *StatusRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"nuance.rpc"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Status

@implementation Status

@dynamic statusCode;
@dynamic statusSubCode;
@dynamic HTTPTransCode;
@dynamic hasRequestInfo, requestInfo;
@dynamic hasStatusMessage, statusMessage;
@dynamic hasHelpInfo, helpInfo;
@dynamic fieldViolationsArray, fieldViolationsArray_Count;
@dynamic hasRetryInfo, retryInfo;
@dynamic statusDetailsArray, statusDetailsArray_Count;

typedef struct Status__storage_ {
  uint32_t _has_storage_[1];
  StatusCode statusCode;
  int32_t statusSubCode;
  int32_t HTTPTransCode;
  RequestInfo *requestInfo;
  LocalizedMessage *statusMessage;
  HelpInfo *helpInfo;
  NSMutableArray *fieldViolationsArray;
  RetryInfo *retryInfo;
  NSMutableArray *statusDetailsArray;
} Status__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "statusCode",
        .dataTypeSpecific.enumDescFunc = StatusCode_EnumDescriptor,
        .number = Status_FieldNumber_StatusCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Status__storage_, statusCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "statusSubCode",
        .dataTypeSpecific.clazz = Nil,
        .number = Status_FieldNumber_StatusSubCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Status__storage_, statusSubCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "HTTPTransCode",
        .dataTypeSpecific.clazz = Nil,
        .number = Status_FieldNumber_HTTPTransCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Status__storage_, HTTPTransCode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "requestInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(RequestInfo),
        .number = Status_FieldNumber_RequestInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Status__storage_, requestInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "statusMessage",
        .dataTypeSpecific.clazz = GPBObjCClass(LocalizedMessage),
        .number = Status_FieldNumber_StatusMessage,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Status__storage_, statusMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "helpInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(HelpInfo),
        .number = Status_FieldNumber_HelpInfo,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Status__storage_, helpInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fieldViolationsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(FieldViolation),
        .number = Status_FieldNumber_FieldViolationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Status__storage_, fieldViolationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "retryInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(RetryInfo),
        .number = Status_FieldNumber_RetryInfo,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Status__storage_, retryInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "statusDetailsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(StatusDetail),
        .number = Status_FieldNumber_StatusDetailsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Status__storage_, statusDetailsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Status class]
                                     rootClass:[StatusRoot class]
                                          file:StatusRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Status__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!!\245\244\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Status_StatusCode_RawValue(Status *message) {
  GPBDescriptor *descriptor = [Status descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Status_FieldNumber_StatusCode];
  return GPBGetMessageRawEnumField(message, field);
}

void SetStatus_StatusCode_RawValue(Status *message, int32_t value) {
  GPBDescriptor *descriptor = [Status descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Status_FieldNumber_StatusCode];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
