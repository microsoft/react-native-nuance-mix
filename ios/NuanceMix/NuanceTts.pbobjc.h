// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nuance_tts.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class TTSALaw;
@class TTSAudioFormat;
@class TTSAudioParameters;
@class TTSControlCode;
@class TTSDownloadParameters;
@class TTSEvent;
@class TTSEventParameters;
@class TTSEvents;
@class TTSInput;
@class TTSLanguageIdentificationParameters;
@class TTSOggOpus;
@class TTSOpus;
@class TTSPCM;
@class TTSSSML;
@class TTSStatus;
@class TTSSynthesisResource;
@class TTSText;
@class TTSToken;
@class TTSTokenizedSequence;
@class TTSULaw;
@class TTSVoice;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum TTSEnumAgeGroup

/**
 *
 * Input or output field specifying whether the voice uses its adult or child version, if available. Included in [Voice](#voice).
 **/
typedef GPB_ENUM(TTSEnumAgeGroup) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  TTSEnumAgeGroup_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Adult voice. Default for GetVoicesRequest. */
  TTSEnumAgeGroup_Adult = 0,

  /** Child voice. */
  TTSEnumAgeGroup_Child = 1,
};

GPBEnumDescriptor *TTSEnumAgeGroup_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL TTSEnumAgeGroup_IsValidValue(int32_t value);

#pragma mark - Enum TTSEnumGender

/**
 *
 * Input or output field, specifying gender for voices that support multiple genders. Included in [Voice](#voice).
 **/
typedef GPB_ENUM(TTSEnumGender) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  TTSEnumGender_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Any gender voice. Default for GetVoicesRequest. */
  TTSEnumGender_Any = 0,

  /** Male voice. */
  TTSEnumGender_Male = 1,

  /** Female voice. */
  TTSEnumGender_Female = 2,

  /** Neutral gender voice. */
  TTSEnumGender_Neutral = 3,
};

GPBEnumDescriptor *TTSEnumGender_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL TTSEnumGender_IsValidValue(int32_t value);

#pragma mark - Enum TTSEnumVariableBitrate

/**
 *
 * Settings for variable bitrate. Included in [OggOpus](#oggopus). Turned on by default.
 **/
typedef GPB_ENUM(TTSEnumVariableBitrate) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  TTSEnumVariableBitrate_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Use variable bitrate. Default. */
  TTSEnumVariableBitrate_VariableBitrateOn = 0,

  /** Do not use variable bitrate. */
  TTSEnumVariableBitrate_VariableBitrateOff = 1,

  /** Use constrained variable bitrate. */
  TTSEnumVariableBitrate_VariableBitrateConstrained = 2,
};

GPBEnumDescriptor *TTSEnumVariableBitrate_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL TTSEnumVariableBitrate_IsValidValue(int32_t value);

#pragma mark - Enum TTSEnumResourceType

/**
 *
 * The type of synthesis resource to tune the output. Included in [SynthesisResource](#synthesisresource). User dictionaries provide custom pronunciations, rulesets apply search-and-replace rules to input text and ActivePrompt databases help tune synthesized audio under certain conditions, using Nuance Vocalizer Studio.
 **/
typedef GPB_ENUM(TTSEnumResourceType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  TTSEnumResourceType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** User dictionary (application/edct-bin-dictionary). Default. */
  TTSEnumResourceType_UserDictionary = 0,

  /** Text user ruleset (application/x-vocalizer-rettt+text). */
  TTSEnumResourceType_TextUserRuleset = 1,

  /** Not supported. Binary user ruleset (application/x-vocalizer-rettt+bin). */
  TTSEnumResourceType_BinaryUserRuleset = 2,

  /** ActivePrompt database (application/x-vocalizer-activeprompt-db). */
  TTSEnumResourceType_ActivepromptDb = 3,

  /** ActivePrompt database with automatic insertion (application/x-vocalizer-activeprompt-db;mode=automatic). */
  TTSEnumResourceType_ActivepromptDbAuto = 4,

  /** Nuance system dictionary (application/sdct-bin-dictionary). */
  TTSEnumResourceType_SystemDictionary = 5,
};

GPBEnumDescriptor *TTSEnumResourceType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL TTSEnumResourceType_IsValidValue(int32_t value);

#pragma mark - Enum TTSEnumSSMLValidationMode

/**
 *
 * SSML validation mode when using SSML input. Included in [Input](#input). Strict by default but can be relaxed.
 **/
typedef GPB_ENUM(TTSEnumSSMLValidationMode) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  TTSEnumSSMLValidationMode_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Strict SSL validation. Default. */
  TTSEnumSSMLValidationMode_Strict = 0,

  /** Give warning only. */
  TTSEnumSSMLValidationMode_Warn = 1,

  /** Do not validate. */
  TTSEnumSSMLValidationMode_None = 2,
};

GPBEnumDescriptor *TTSEnumSSMLValidationMode_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL TTSEnumSSMLValidationMode_IsValidValue(int32_t value);

#pragma mark - TTSNuanceTtsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface TTSNuanceTtsRoot : GPBRootObject
@end

#pragma mark - TTSGetVoicesRequest

typedef GPB_ENUM(TTSGetVoicesRequest_FieldNumber) {
  TTSGetVoicesRequest_FieldNumber_Voice = 1,
};

/**
 *
 * Input message for [Synthesizer](#synthesizer) - GetVoices, to query voices available to the client.
 **/
GPB_FINAL @interface TTSGetVoicesRequest : GPBMessage

/** Optionally filter the voices to retrieve, e.g. set language to en-US to return only American English voices. */
@property(nonatomic, readwrite, strong, null_resettable) TTSVoice *voice;
/** Test to see if @c voice has been set. */
@property(nonatomic, readwrite) BOOL hasVoice;

@end

#pragma mark - TTSGetVoicesResponse

typedef GPB_ENUM(TTSGetVoicesResponse_FieldNumber) {
  TTSGetVoicesResponse_FieldNumber_VoicesArray = 1,
};

/**
 *
 * Output message for [Synthesizer](#synthesizer) - GetVoices. Includes a list of voices that matched the input criteria, if any.
 **/
GPB_FINAL @interface TTSGetVoicesResponse : GPBMessage

/** Repeated. Voices and characteristics returned. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<TTSVoice*> *voicesArray;
/** The number of items in @c voicesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger voicesArray_Count;

@end

#pragma mark - TTSSynthesisRequest

typedef GPB_ENUM(TTSSynthesisRequest_FieldNumber) {
  TTSSynthesisRequest_FieldNumber_Voice = 1,
  TTSSynthesisRequest_FieldNumber_AudioParams = 2,
  TTSSynthesisRequest_FieldNumber_Input = 3,
  TTSSynthesisRequest_FieldNumber_EventParams = 4,
  TTSSynthesisRequest_FieldNumber_ClientData = 5,
  TTSSynthesisRequest_FieldNumber_UserId = 6,
};

/**
 *
 * Input message for [Synthesizer](#synthesizer) - Synthesize. Specifies input text, audio parameters, and events to subscribe to, in exchange for synthesized audio.
 **/
GPB_FINAL @interface TTSSynthesisRequest : GPBMessage

/** The voice to use for audio synthesis. Mandatory. */
@property(nonatomic, readwrite, strong, null_resettable) TTSVoice *voice;
/** Test to see if @c voice has been set. */
@property(nonatomic, readwrite) BOOL hasVoice;

/** Output audio parameters, such as encoding and volume. */
@property(nonatomic, readwrite, strong, null_resettable) TTSAudioParameters *audioParams;
/** Test to see if @c audioParams has been set. */
@property(nonatomic, readwrite) BOOL hasAudioParams;

/** Input text to synthesize, tuning data, etc. Mandatory. */
@property(nonatomic, readwrite, strong, null_resettable) TTSInput *input;
/** Test to see if @c input has been set. */
@property(nonatomic, readwrite) BOOL hasInput;

/** Markers and other info to include in server events returned during synthesis. */
@property(nonatomic, readwrite, strong, null_resettable) TTSEventParameters *eventParams;
/** Test to see if @c eventParams has been set. */
@property(nonatomic, readwrite) BOOL hasEventParams;

/** Repeated. Client-supplied key-value pairs to inject into the call log. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *clientData;
/** The number of items in @c clientData without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger clientData_Count;

/** Identifies a particular user within an application. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userId;

@end

#pragma mark - TTSVoice

typedef GPB_ENUM(TTSVoice_FieldNumber) {
  TTSVoice_FieldNumber_Name = 1,
  TTSVoice_FieldNumber_Model = 2,
  TTSVoice_FieldNumber_Language = 3,
  TTSVoice_FieldNumber_AgeGroup = 4,
  TTSVoice_FieldNumber_Gender = 5,
  TTSVoice_FieldNumber_SampleRateHz = 6,
  TTSVoice_FieldNumber_LanguageTlw = 7,
  TTSVoice_FieldNumber_Restricted = 8,
  TTSVoice_FieldNumber_Version = 9,
  TTSVoice_FieldNumber_ForeignLanguagesArray = 10,
};

/**
 *
 * Input or output message for voices. When sent as input:
 * - In [GetVoicesRequest](#getvoicesrequest), it filters the list of available voices.
 * - In [SynthesisRequest](#synthesisrequest), it specifies the voice to use for synthesis.
 *
 * When received as output in [GetVoicesResponse](#getvoicesresponse), it returns the list of available voices.
 **/
GPB_FINAL @interface TTSVoice : GPBMessage

/** The voice's name, e.g. 'Evan'. Mandatory for SynthesisRequest. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** The voice's quality model, e.g. 'enhanced' or 'standard'. Mandatory for SynthesisRequest. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *model;

/** IETF language code, e.g. 'en-US'. Used only for GetVoicesRequest and GetVoicesResponse, to search for voices with a certain mother tongue. Ignored otherwise. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *language;

/** Used only for GetVoicesRequest and GetVoicesResponse, to search for adult or child voices. Ignored otherwise. */
@property(nonatomic, readwrite) TTSEnumAgeGroup ageGroup;

/** Used only for GetVoicesRequest and GetVoicesResponse, to search for voices with a certain gender. Ignored otherwise. */
@property(nonatomic, readwrite) TTSEnumGender gender;

/** Used only for GetVoicesRequest and GetVoicesResponse, to search for a certain native sample rate. Ignored otherwise. */
@property(nonatomic, readwrite) uint32_t sampleRateHz;

/** Used only for GetVoicesRequest and GetVoicesResponse. Three-letter language code (e.g. 'enu' for American English), for configuring language identification in [Input](#input). */
@property(nonatomic, readwrite, copy, null_resettable) NSString *languageTlw;

/** Used only in GetVoicesResponse, to identify restricted voices. These are custom voices available only to specific customers. Ignored otherwise. */
@property(nonatomic, readwrite) BOOL restricted;

/** Used only in GetVoicesResponse, to return the voice's version. Ignored otherwise. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *version;

/** Used only in GetVoicesResponse, to return the foreign languages of a multilingual voice. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *foreignLanguagesArray;
/** The number of items in @c foreignLanguagesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger foreignLanguagesArray_Count;

@end

/**
 * Fetches the raw value of a @c TTSVoice's @c ageGroup property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t TTSVoice_AgeGroup_RawValue(TTSVoice *message);
/**
 * Sets the raw value of an @c TTSVoice's @c ageGroup property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetTTSVoice_AgeGroup_RawValue(TTSVoice *message, int32_t value);

/**
 * Fetches the raw value of a @c TTSVoice's @c gender property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t TTSVoice_Gender_RawValue(TTSVoice *message);
/**
 * Sets the raw value of an @c TTSVoice's @c gender property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetTTSVoice_Gender_RawValue(TTSVoice *message, int32_t value);

#pragma mark - TTSAudioParameters

typedef GPB_ENUM(TTSAudioParameters_FieldNumber) {
  TTSAudioParameters_FieldNumber_AudioFormat = 1,
  TTSAudioParameters_FieldNumber_VolumePercentage = 2,
  TTSAudioParameters_FieldNumber_SpeakingRateFactor = 3,
  TTSAudioParameters_FieldNumber_AudioChunkDurationMs = 4,
  TTSAudioParameters_FieldNumber_TargetAudioLengthMs = 5,
  TTSAudioParameters_FieldNumber_DisableEarlyEmission = 6,
};

/**
 *
 * Input message for audio-related parameters during synthesis, including encoding, volume, and audio length. Included in [SynthesisRequest](#synthesisrequest).
 **/
GPB_FINAL @interface TTSAudioParameters : GPBMessage

/** Audio encoding. Default PCM 22.5kHz. */
@property(nonatomic, readwrite, strong, null_resettable) TTSAudioFormat *audioFormat;
/** Test to see if @c audioFormat has been set. */
@property(nonatomic, readwrite) BOOL hasAudioFormat;

/** Volume amplitude, from 0 to 100. Default 80. */
@property(nonatomic, readwrite) uint32_t volumePercentage;

/** Speaking rate, from 0 to 2.0. Default 1.0. */
@property(nonatomic, readwrite) float speakingRateFactor;

/** Maximum duration, in ms, of an audio chunk delivered to the client, from 1 to 60000. Default is 20000 (20 seconds). When this parameter is large enough (for example, 20 or 30 seconds), each audio chunk contains an audible segment surrounded by silence. */
@property(nonatomic, readwrite) uint32_t audioChunkDurationMs;

/** Maximum duration, in ms, of synthesized audio. When greater than 0, the server stops ongoing synthesis at the first sentence end, or silence, closest to the value. */
@property(nonatomic, readwrite) uint32_t targetAudioLengthMs;

/** By default, audio segments are emitted as soon as possible, even if they are not audible. This behavior may be disabled. */
@property(nonatomic, readwrite) BOOL disableEarlyEmission;

@end

#pragma mark - TTSAudioFormat

typedef GPB_ENUM(TTSAudioFormat_FieldNumber) {
  TTSAudioFormat_FieldNumber_Pcm = 1,
  TTSAudioFormat_FieldNumber_Alaw = 2,
  TTSAudioFormat_FieldNumber_Ulaw = 3,
  TTSAudioFormat_FieldNumber_OggOpus = 4,
  TTSAudioFormat_FieldNumber_Opus = 5,
};

typedef GPB_ENUM(TTSAudioFormat_AudioFormat_OneOfCase) {
  TTSAudioFormat_AudioFormat_OneOfCase_GPBUnsetOneOfCase = 0,
  TTSAudioFormat_AudioFormat_OneOfCase_Pcm = 1,
  TTSAudioFormat_AudioFormat_OneOfCase_Alaw = 2,
  TTSAudioFormat_AudioFormat_OneOfCase_Ulaw = 3,
  TTSAudioFormat_AudioFormat_OneOfCase_OggOpus = 4,
  TTSAudioFormat_AudioFormat_OneOfCase_Opus = 5,
};

/**
 *
 * Input message for audio encoding of synthesized text. Included in [AudioParameters](#audioparameters).
 **/
GPB_FINAL @interface TTSAudioFormat : GPBMessage

@property(nonatomic, readonly) TTSAudioFormat_AudioFormat_OneOfCase audioFormatOneOfCase;

/** Signed 16-bit little endian PCM. */
@property(nonatomic, readwrite, strong, null_resettable) TTSPCM *pcm;

/** G.711 A-law, 8kHz. */
@property(nonatomic, readwrite, strong, null_resettable) TTSALaw *alaw;

/** G.711 Mu-law, 8kHz. */
@property(nonatomic, readwrite, strong, null_resettable) TTSULaw *ulaw;

/** Ogg Opus, 8kHz, 16kHz or 24kHz. */
@property(nonatomic, readwrite, strong, null_resettable) TTSOggOpus *oggOpus;

/** Opus, 8kHz, 16kHZ or 24 kHz. The audio will be sent one Opus packet at a time. */
@property(nonatomic, readwrite, strong, null_resettable) TTSOpus *opus;

@end

/**
 * Clears whatever value was set for the oneof 'audioFormat'.
 **/
void TTSAudioFormat_ClearAudioFormatOneOfCase(TTSAudioFormat *message);

#pragma mark - TTSPCM

typedef GPB_ENUM(TTSPCM_FieldNumber) {
  TTSPCM_FieldNumber_SampleRateHz = 1,
};

/**
 *
 * Input message defining PCM sample rate. Included in [Audioformat](#audioformat).
 **/
GPB_FINAL @interface TTSPCM : GPBMessage

/** Output sample rate: 8000, 11025, 16000, 22050, 24000. */
@property(nonatomic, readwrite) uint32_t sampleRateHz;

@end

#pragma mark - TTSALaw

/**
 *
 * Input message defining A-law audio format. G.711 audio formats are set to 8kHz. Included in [Audioformat](#audioformat).
 **/
GPB_FINAL @interface TTSALaw : GPBMessage

@end

#pragma mark - TTSULaw

/**
 *
 * Input message defining Mu-law audio format. G.711 audio formats are set to 8kHz. Included in [Audioformat](#audioformat).
 **/
GPB_FINAL @interface TTSULaw : GPBMessage

@end

#pragma mark - TTSOpus

typedef GPB_ENUM(TTSOpus_FieldNumber) {
  TTSOpus_FieldNumber_SampleRateHz = 1,
  TTSOpus_FieldNumber_BitRateBps = 2,
  TTSOpus_FieldNumber_MaxFrameDurationMs = 3,
  TTSOpus_FieldNumber_Complexity = 4,
  TTSOpus_FieldNumber_Vbr = 5,
};

/**
 *
 * Input message defining Opus output rate. Included in [Audioformat](#audioformat).
 **/
GPB_FINAL @interface TTSOpus : GPBMessage

/** Output sample rate. Supported values: 8000, 16000, 24000 Hz. */
@property(nonatomic, readwrite) uint32_t sampleRateHz;

/** Valid range is 500 to 256000 bps. Default 28000 bps. */
@property(nonatomic, readwrite) uint32_t bitRateBps;

/** Opus frame size, in ms: 2.5, 5, 10, 20, 40, 60. Default 20. */
@property(nonatomic, readwrite) float maxFrameDurationMs;

/** Computational complexity. A complexity of 0 means the codec default. */
@property(nonatomic, readwrite) uint32_t complexity;

/** Variable bitrate. On by default. */
@property(nonatomic, readwrite) TTSEnumVariableBitrate vbr;

@end

/**
 * Fetches the raw value of a @c TTSOpus's @c vbr property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t TTSOpus_Vbr_RawValue(TTSOpus *message);
/**
 * Sets the raw value of an @c TTSOpus's @c vbr property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetTTSOpus_Vbr_RawValue(TTSOpus *message, int32_t value);

#pragma mark - TTSOggOpus

typedef GPB_ENUM(TTSOggOpus_FieldNumber) {
  TTSOggOpus_FieldNumber_SampleRateHz = 1,
  TTSOggOpus_FieldNumber_BitRateBps = 2,
  TTSOggOpus_FieldNumber_MaxFrameDurationMs = 3,
  TTSOggOpus_FieldNumber_Complexity = 4,
  TTSOggOpus_FieldNumber_Vbr = 5,
};

/**
 *
 * Input message defining Ogg Opus output rate. Included in [Audioformat](#audioformat).
 **/
GPB_FINAL @interface TTSOggOpus : GPBMessage

/** Output sample rate. Supported values: 8000, 16000, 24000 Hz. */
@property(nonatomic, readwrite) uint32_t sampleRateHz;

/** Valid range is 500 to 256000 bps. Default 28000 bps. */
@property(nonatomic, readwrite) uint32_t bitRateBps;

/** Opus frame size, in ms: 2.5, 5, 10, 20, 40, 60. Default 20. */
@property(nonatomic, readwrite) float maxFrameDurationMs;

/** Computational complexity. A complexity of 0 means the codec default. */
@property(nonatomic, readwrite) uint32_t complexity;

/** Variable bitrate. On by default. */
@property(nonatomic, readwrite) TTSEnumVariableBitrate vbr;

@end

/**
 * Fetches the raw value of a @c TTSOggOpus's @c vbr property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t TTSOggOpus_Vbr_RawValue(TTSOggOpus *message);
/**
 * Sets the raw value of an @c TTSOggOpus's @c vbr property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetTTSOggOpus_Vbr_RawValue(TTSOggOpus *message, int32_t value);

#pragma mark - TTSInput

typedef GPB_ENUM(TTSInput_FieldNumber) {
  TTSInput_FieldNumber_Text = 1,
  TTSInput_FieldNumber_Ssml = 2,
  TTSInput_FieldNumber_TokenizedSequence = 3,
  TTSInput_FieldNumber_ResourcesArray = 4,
  TTSInput_FieldNumber_LidParams = 5,
  TTSInput_FieldNumber_DownloadParams = 6,
};

typedef GPB_ENUM(TTSInput_InputData_OneOfCase) {
  TTSInput_InputData_OneOfCase_GPBUnsetOneOfCase = 0,
  TTSInput_InputData_OneOfCase_Text = 1,
  TTSInput_InputData_OneOfCase_Ssml = 2,
  TTSInput_InputData_OneOfCase_TokenizedSequence = 3,
};

/**
 *
 * Input message containing text to synthesize and synthesis parameters, including tuning data, etc. Included in [SynthesisRequest](#synthesisrequest). The type of input may be:
 * - Plain text.
 * - An SSML document.
 * - An alternating sequence of plain text and Nuance control codes.
 **/
GPB_FINAL @interface TTSInput : GPBMessage

@property(nonatomic, readonly) TTSInput_InputData_OneOfCase inputDataOneOfCase;

/** Text input. */
@property(nonatomic, readwrite, strong, null_resettable) TTSText *text;

/** SSML input. */
@property(nonatomic, readwrite, strong, null_resettable) TTSSSML *ssml;

/** Sequence of text and Nuance control codes. */
@property(nonatomic, readwrite, strong, null_resettable) TTSTokenizedSequence *tokenizedSequence;

/** Repeated. Synthesis resources (user dictionaries, rulesets, etc.) to tune synthesized audio. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<TTSSynthesisResource*> *resourcesArray;
/** The number of items in @c resourcesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger resourcesArray_Count;

/** LID parameters. */
@property(nonatomic, readwrite, strong, null_resettable) TTSLanguageIdentificationParameters *lidParams;
/** Test to see if @c lidParams has been set. */
@property(nonatomic, readwrite) BOOL hasLidParams;

/** Remote file download parameters. */
@property(nonatomic, readwrite, strong, null_resettable) TTSDownloadParameters *downloadParams;
/** Test to see if @c downloadParams has been set. */
@property(nonatomic, readwrite) BOOL hasDownloadParams;

@end

/**
 * Clears whatever value was set for the oneof 'inputData'.
 **/
void TTSInput_ClearInputDataOneOfCase(TTSInput *message);

#pragma mark - TTSText

typedef GPB_ENUM(TTSText_FieldNumber) {
  TTSText_FieldNumber_Text = 1,
  TTSText_FieldNumber_Uri = 2,
};

typedef GPB_ENUM(TTSText_TextData_OneOfCase) {
  TTSText_TextData_OneOfCase_GPBUnsetOneOfCase = 0,
  TTSText_TextData_OneOfCase_Text = 1,
  TTSText_TextData_OneOfCase_Uri = 2,
};

/**
 *
 * Input message for synthesizing plain text. The encoding must be in UTF-8.
 **/
GPB_FINAL @interface TTSText : GPBMessage

@property(nonatomic, readonly) TTSText_TextData_OneOfCase textDataOneOfCase;

/** Plain input text in UTF-8 encoding. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;

/** Remote URI to the plain input text. Disabled for Nuance-hosted TTS. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *uri;

@end

/**
 * Clears whatever value was set for the oneof 'textData'.
 **/
void TTSText_ClearTextDataOneOfCase(TTSText *message);

#pragma mark - TTSSSML

typedef GPB_ENUM(TTSSSML_FieldNumber) {
  TTSSSML_FieldNumber_Text = 1,
  TTSSSML_FieldNumber_Uri = 2,
  TTSSSML_FieldNumber_SsmlValidationMode = 3,
};

typedef GPB_ENUM(TTSSSML_SsmlData_OneOfCase) {
  TTSSSML_SsmlData_OneOfCase_GPBUnsetOneOfCase = 0,
  TTSSSML_SsmlData_OneOfCase_Text = 1,
  TTSSSML_SsmlData_OneOfCase_Uri = 2,
};

/**
 *
 * Input message for synthesizing an SSML document.
 **/
GPB_FINAL @interface TTSSSML : GPBMessage

@property(nonatomic, readonly) TTSSSML_SsmlData_OneOfCase ssmlDataOneOfCase;

/** SSML input text. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;

/** Remote URI to the SSML input text. Disabled for Nuance-hosted TTS. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *uri;

/** SSML validation mode. Default STRICT. */
@property(nonatomic, readwrite) TTSEnumSSMLValidationMode ssmlValidationMode;

@end

/**
 * Fetches the raw value of a @c TTSSSML's @c ssmlValidationMode property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t TTSSSML_SsmlValidationMode_RawValue(TTSSSML *message);
/**
 * Sets the raw value of an @c TTSSSML's @c ssmlValidationMode property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetTTSSSML_SsmlValidationMode_RawValue(TTSSSML *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'ssmlData'.
 **/
void TTSSSML_ClearSsmlDataOneOfCase(TTSSSML *message);

#pragma mark - TTSTokenizedSequence

typedef GPB_ENUM(TTSTokenizedSequence_FieldNumber) {
  TTSTokenizedSequence_FieldNumber_TokensArray = 1,
};

/**
 *
 * Input message for synthesizing a sequence of plain text and Nuance control codes.
 **/
GPB_FINAL @interface TTSTokenizedSequence : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<TTSToken*> *tokensArray;
/** The number of items in @c tokensArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger tokensArray_Count;

@end

#pragma mark - TTSToken

typedef GPB_ENUM(TTSToken_FieldNumber) {
  TTSToken_FieldNumber_Text = 1,
  TTSToken_FieldNumber_ControlCode = 2,
};

typedef GPB_ENUM(TTSToken_TokenData_OneOfCase) {
  TTSToken_TokenData_OneOfCase_GPBUnsetOneOfCase = 0,
  TTSToken_TokenData_OneOfCase_Text = 1,
  TTSToken_TokenData_OneOfCase_ControlCode = 2,
};

/**
 *
 * The unit when using TokenizedSequence for input. Each token can either be plain text or a Nuance control code.
 **/
GPB_FINAL @interface TTSToken : GPBMessage

@property(nonatomic, readonly) TTSToken_TokenData_OneOfCase tokenDataOneOfCase;

/** Plain input text. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;

/** Nuance control code. */
@property(nonatomic, readwrite, strong, null_resettable) TTSControlCode *controlCode;

@end

/**
 * Clears whatever value was set for the oneof 'tokenData'.
 **/
void TTSToken_ClearTokenDataOneOfCase(TTSToken *message);

#pragma mark - TTSControlCode

typedef GPB_ENUM(TTSControlCode_FieldNumber) {
  TTSControlCode_FieldNumber_Key = 1,
  TTSControlCode_FieldNumber_Value = 2,
};

/**
 *
 * A Nuance control code allows the user to control how text is spoken, similarly to SSML.
 **/
GPB_FINAL @interface TTSControlCode : GPBMessage

/** Name of the control code, e.g. "pause". */
@property(nonatomic, readwrite, copy, null_resettable) NSString *key;

/** Value of the control code. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *value;

@end

#pragma mark - TTSSynthesisResource

typedef GPB_ENUM(TTSSynthesisResource_FieldNumber) {
  TTSSynthesisResource_FieldNumber_Type = 1,
  TTSSynthesisResource_FieldNumber_Uri = 2,
  TTSSynthesisResource_FieldNumber_Body = 3,
};

typedef GPB_ENUM(TTSSynthesisResource_ResourceData_OneOfCase) {
  TTSSynthesisResource_ResourceData_OneOfCase_GPBUnsetOneOfCase = 0,
  TTSSynthesisResource_ResourceData_OneOfCase_Uri = 2,
  TTSSynthesisResource_ResourceData_OneOfCase_Body = 3,
};

/**
 *
 * Input message specifying the type of file to tune the synthesized output and its location or contents. Included in [Input](#input).
 **/
GPB_FINAL @interface TTSSynthesisResource : GPBMessage

/** Resource type, e.g. user dictionary, etc. Default USER_DICTIONARY. */
@property(nonatomic, readwrite) TTSEnumResourceType type;

@property(nonatomic, readonly) TTSSynthesisResource_ResourceData_OneOfCase resourceDataOneOfCase;

/** URI to the remote resource, or */
@property(nonatomic, readwrite, copy, null_resettable) NSString *uri;

/** For EnumResourceType USER_DICTIONARY, the contents of the file. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *body;

@end

/**
 * Fetches the raw value of a @c TTSSynthesisResource's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t TTSSynthesisResource_Type_RawValue(TTSSynthesisResource *message);
/**
 * Sets the raw value of an @c TTSSynthesisResource's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetTTSSynthesisResource_Type_RawValue(TTSSynthesisResource *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'resourceData'.
 **/
void TTSSynthesisResource_ClearResourceDataOneOfCase(TTSSynthesisResource *message);

#pragma mark - TTSLanguageIdentificationParameters

typedef GPB_ENUM(TTSLanguageIdentificationParameters_FieldNumber) {
  TTSLanguageIdentificationParameters_FieldNumber_Disable = 1,
  TTSLanguageIdentificationParameters_FieldNumber_LanguagesArray = 2,
  TTSLanguageIdentificationParameters_FieldNumber_AlwaysUseHighestConfidence = 3,
};

/**
 *
 * Input message controlling the language identifier. Included in [Input](#input). The language identifier runs on input blocks labeled with the <ESC>\\lang=unknown\\ control sequence or SSML xml:lang="unknown". The language identifier automatically restricts the matched languages to the installed voices. This limits the permissible languages, and also sets the order of precedence (first to last) when they have equal confidence scores.
 **/
GPB_FINAL @interface TTSLanguageIdentificationParameters : GPBMessage

/** Whether to disable language identification. Turned on by default. */
@property(nonatomic, readwrite) BOOL disable;

/** Repeated. List of three-letter language codes (e.g. enu, frc, spm) to restrict language identification results, in order of precedence. Use GetVoicesRequest - Voice - language_tlw to obtain the three-letter codes. Default blank. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *languagesArray;
/** The number of items in @c languagesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger languagesArray_Count;

/** If enabled, language identification always chooses the language with the highest confidence score, even if the score is low. Default false, meaning use language with any confidence. */
@property(nonatomic, readwrite) BOOL alwaysUseHighestConfidence;

@end

#pragma mark - TTSDownloadParameters

typedef GPB_ENUM(TTSDownloadParameters_FieldNumber) {
  TTSDownloadParameters_FieldNumber_Headers = 1,
  TTSDownloadParameters_FieldNumber_RefuseCookies = 2,
  TTSDownloadParameters_FieldNumber_RequestTimeoutMs = 3,
};

typedef GPB_ENUM(TTSDownloadParameters_OptionalDownloadParameterRequestTimeoutMs_OneOfCase) {
  TTSDownloadParameters_OptionalDownloadParameterRequestTimeoutMs_OneOfCase_GPBUnsetOneOfCase = 0,
  TTSDownloadParameters_OptionalDownloadParameterRequestTimeoutMs_OneOfCase_RequestTimeoutMs = 3,
};

/**
 *
 * Input message containing parameters for remote file download, whether for input text (Input.uri) or a SynthesisResource (SynthesisResource.uri). Included in [Input](#input).
 **/
GPB_FINAL @interface TTSDownloadParameters : GPBMessage

/** HTTP headers to include in outgoing requests. Only whitelisted headers will actually be sent. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *headers;
/** The number of items in @c headers without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger headers_Count;

/** Whether to disable cookies. By default, HTTP requests accept cookies. */
@property(nonatomic, readwrite) BOOL refuseCookies;

@property(nonatomic, readonly) TTSDownloadParameters_OptionalDownloadParameterRequestTimeoutMs_OneOfCase optionalDownloadParameterRequestTimeoutMsOneOfCase;

/** Request timeout in ms. Default (0) means server default, usually 30000 (30 seconds). */
@property(nonatomic, readwrite) uint32_t requestTimeoutMs;

@end

/**
 * Clears whatever value was set for the oneof 'optionalDownloadParameterRequestTimeoutMs'.
 **/
void TTSDownloadParameters_ClearOptionalDownloadParameterRequestTimeoutMsOneOfCase(TTSDownloadParameters *message);

#pragma mark - TTSEventParameters

typedef GPB_ENUM(TTSEventParameters_FieldNumber) {
  TTSEventParameters_FieldNumber_SendSentenceMarkerEvents = 1,
  TTSEventParameters_FieldNumber_SendWordMarkerEvents = 2,
  TTSEventParameters_FieldNumber_SendPhonemeMarkerEvents = 3,
  TTSEventParameters_FieldNumber_SendBookmarkMarkerEvents = 4,
  TTSEventParameters_FieldNumber_SendParagraphMarkerEvents = 5,
  TTSEventParameters_FieldNumber_SendVisemes = 6,
  TTSEventParameters_FieldNumber_SendLogEvents = 7,
  TTSEventParameters_FieldNumber_SuppressInput = 8,
};

/**
 *
 * Input message that defines event subscription parameters. Included in [SynthesisRequest](#synthesisrequest). Events that are requested are sent throughout the SynthesisResponse stream, when generated.  Marker events can send events as certain parts of the synthesized audio are reached, for example, at the end of a word, sentence, or user-defined bookmark.
 *
 * Log events are produced throughout a synthesis request for events such as a voice loaded by the server or an audio chunk being ready to send.
 **/
GPB_FINAL @interface TTSEventParameters : GPBMessage

/** Sentence marker. Default: do not send. */
@property(nonatomic, readwrite) BOOL sendSentenceMarkerEvents;

/** Word marker. Default: do not send. */
@property(nonatomic, readwrite) BOOL sendWordMarkerEvents;

/** Phoneme marker. Default: do not send. */
@property(nonatomic, readwrite) BOOL sendPhonemeMarkerEvents;

/** Bookmark marker. Default: do not send. */
@property(nonatomic, readwrite) BOOL sendBookmarkMarkerEvents;

/** Paragraph marker. Default: do not send. */
@property(nonatomic, readwrite) BOOL sendParagraphMarkerEvents;

/** Lipsync information. Default: do not send. */
@property(nonatomic, readwrite) BOOL sendVisemes;

/** Whether to log events during synthesis. By default, logging is turned off. */
@property(nonatomic, readwrite) BOOL sendLogEvents;

/** Whether to omit input text and URIs from log events. By default, these items are included. */
@property(nonatomic, readwrite) BOOL suppressInput;

@end

#pragma mark - TTSSynthesisResponse

typedef GPB_ENUM(TTSSynthesisResponse_FieldNumber) {
  TTSSynthesisResponse_FieldNumber_Status = 1,
  TTSSynthesisResponse_FieldNumber_Events = 2,
  TTSSynthesisResponse_FieldNumber_Audio = 3,
};

typedef GPB_ENUM(TTSSynthesisResponse_Response_OneOfCase) {
  TTSSynthesisResponse_Response_OneOfCase_GPBUnsetOneOfCase = 0,
  TTSSynthesisResponse_Response_OneOfCase_Status = 1,
  TTSSynthesisResponse_Response_OneOfCase_Events = 2,
  TTSSynthesisResponse_Response_OneOfCase_Audio = 3,
};

/**
 *
 * The [Synthesizer](#synthesizer) - Synthesize RPC call returns a stream of SynthesisResponse messages. The response contains one of:
 * - A status response, indicating completion or failure of the request. This is received only once and signifies the end of a Synthesize call.
 * - A list of events the client has requested. This can be received many times. See EventParameters for details.
 * - An audio buffer. This may be received many times.
 **/
GPB_FINAL @interface TTSSynthesisResponse : GPBMessage

@property(nonatomic, readonly) TTSSynthesisResponse_Response_OneOfCase responseOneOfCase;

/** A status response, indicating completion or failure of the request. */
@property(nonatomic, readwrite, strong, null_resettable) TTSStatus *status;

/** A list of events. See EventParameters for details. */
@property(nonatomic, readwrite, strong, null_resettable) TTSEvents *events;

/** The latest audio buffer. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *audio;

@end

/**
 * Clears whatever value was set for the oneof 'response'.
 **/
void TTSSynthesisResponse_ClearResponseOneOfCase(TTSSynthesisResponse *message);

#pragma mark - TTSUnarySynthesisResponse

typedef GPB_ENUM(TTSUnarySynthesisResponse_FieldNumber) {
  TTSUnarySynthesisResponse_FieldNumber_Status = 1,
  TTSUnarySynthesisResponse_FieldNumber_Events = 2,
  TTSUnarySynthesisResponse_FieldNumber_Audio = 3,
};

/**
 *
 * The [Synthesizer](#synthesizer) - UnarySynthesize RPC call returns a single UnarySynthesisResponse message. It is similar to a SynthesisResponse message but includes all the information instead of a single type of response. The response contains:
 * - A status response, indicating completion or failure of the request.
 * - A list of events the client has requested. See EventParameters for details.
 * - The complete audio buffer of the synthesized text.
 **/
GPB_FINAL @interface TTSUnarySynthesisResponse : GPBMessage

/** A status response, indicating completion or failure of the request. */
@property(nonatomic, readwrite, strong, null_resettable) TTSStatus *status;
/** Test to see if @c status has been set. */
@property(nonatomic, readwrite) BOOL hasStatus;

/** A list of events. See EventParameters for details. */
@property(nonatomic, readwrite, strong, null_resettable) TTSEvents *events;
/** Test to see if @c events has been set. */
@property(nonatomic, readwrite) BOOL hasEvents;

/** Audio buffer of the synthesized text. */
@property(nonatomic, readwrite, copy, null_resettable) NSData *audio;

@end

#pragma mark - TTSStatus

typedef GPB_ENUM(TTSStatus_FieldNumber) {
  TTSStatus_FieldNumber_Code = 1,
  TTSStatus_FieldNumber_Message = 2,
  TTSStatus_FieldNumber_Details = 3,
};

/**
 *
 * Output message containing a status response, indicating completion or failure of a SynthesisRequest. Included in [SynthesisResponse](#synthesisresponse) and [UnarySynthesisResponse](#unarysynthesisresponse).
 **/
GPB_FINAL @interface TTSStatus : GPBMessage

/** HTTP-style return code: 200, 4xx, or 5xx as appropriate. */
@property(nonatomic, readwrite) uint32_t code;

/** Brief description of the status. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *message;

/** Longer description if available. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *details;

@end

#pragma mark - TTSEvents

typedef GPB_ENUM(TTSEvents_FieldNumber) {
  TTSEvents_FieldNumber_EventsArray = 1,
};

/**
 *
 * Output message defining a container for a list of events. This container is needed because oneof does not allow repeated parameters in Protobuf. Included in [SynthesisResponse](#synthesisresponse) and [UnarySynthesisResponse](#unarysynthesisresponse).
 **/
GPB_FINAL @interface TTSEvents : GPBMessage

/** Repeated. One or more events. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<TTSEvent*> *eventsArray;
/** The number of items in @c eventsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger eventsArray_Count;

@end

#pragma mark - TTSEvent

typedef GPB_ENUM(TTSEvent_FieldNumber) {
  TTSEvent_FieldNumber_Name = 1,
  TTSEvent_FieldNumber_Values = 2,
};

/**
 *
 * Output message defining an event message.  Included in [Events](#events). See EventParameters for details.
 **/
GPB_FINAL @interface TTSEvent : GPBMessage

/** Either "Markers" or the name of the event in the case of a Log Event. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** Repeated. Key-value data relevant to the current event. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *values;
/** The number of items in @c values without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger values_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
