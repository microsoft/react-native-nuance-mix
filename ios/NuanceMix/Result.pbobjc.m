// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: result.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Result.pbobjc.h"
#import "SingleIntentInterpretation.pbobjc.h"
#import "MultiIntentInterpretation.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Interpretation);
GPBObjCClassDeclaration(MultiIntentInterpretation);
GPBObjCClassDeclaration(SingleIntentInterpretation);

#pragma mark - ResultRoot

@implementation ResultRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ResultRoot_FileDescriptor

static GPBFileDescriptor *ResultRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"nuance.nlu.v1"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - InterpretResult

@implementation InterpretResult

@dynamic literal;
@dynamic interpretationsArray, interpretationsArray_Count;
@dynamic sensitive;
@dynamic formattedLiteral;

typedef struct InterpretResult__storage_ {
  uint32_t _has_storage_[1];
  NSString *literal;
  NSMutableArray *interpretationsArray;
  NSString *formattedLiteral;
} InterpretResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "literal",
        .dataTypeSpecific.clazz = Nil,
        .number = InterpretResult_FieldNumber_Literal,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InterpretResult__storage_, literal),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "interpretationsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Interpretation),
        .number = InterpretResult_FieldNumber_InterpretationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InterpretResult__storage_, interpretationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sensitive",
        .dataTypeSpecific.clazz = Nil,
        .number = InterpretResult_FieldNumber_Sensitive,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "formattedLiteral",
        .dataTypeSpecific.clazz = Nil,
        .number = InterpretResult_FieldNumber_FormattedLiteral,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(InterpretResult__storage_, formattedLiteral),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InterpretResult class]
                                     rootClass:[ResultRoot class]
                                          file:ResultRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InterpretResult__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Interpretation

@implementation Interpretation

@dynamic interpretationUnionOneOfCase;
@dynamic singleIntentInterpretation;
@dynamic multiIntentInterpretation;

typedef struct Interpretation__storage_ {
  uint32_t _has_storage_[2];
  SingleIntentInterpretation *singleIntentInterpretation;
  MultiIntentInterpretation *multiIntentInterpretation;
} Interpretation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "singleIntentInterpretation",
        .dataTypeSpecific.clazz = GPBObjCClass(SingleIntentInterpretation),
        .number = Interpretation_FieldNumber_SingleIntentInterpretation,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Interpretation__storage_, singleIntentInterpretation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "multiIntentInterpretation",
        .dataTypeSpecific.clazz = GPBObjCClass(MultiIntentInterpretation),
        .number = Interpretation_FieldNumber_MultiIntentInterpretation,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Interpretation__storage_, multiIntentInterpretation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Interpretation class]
                                     rootClass:[ResultRoot class]
                                          file:ResultRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Interpretation__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "interpretationUnion",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Interpretation_ClearInterpretationUnionOneOfCase(Interpretation *message) {
  GPBDescriptor *descriptor = [Interpretation descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
