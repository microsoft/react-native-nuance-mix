// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dlg_common_messages.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class DLGBackendConnectionSettings;
@class DLGContinueAction;
@class DLGDAAction;
@class DLGDialogEvent;
@class DLGEndAction;
@class DLGEscalationAction;
@class DLGMessage;
@class DLGMessageSettings;
@class DLGMessage_Audio;
@class DLGMessage_Nlg;
@class DLGMessage_TTSParameters;
@class DLGMessage_TTSParameters_Voice;
@class DLGMessage_Visual;
@class DLGQAAction;
@class DLGRecognitionSettings;
@class DLGRecognitionSettings_CollectionSettings;
@class DLGRecognitionSettings_DtmfMapping;
@class DLGRecognitionSettings_DtmfSettings;
@class DLGRecognitionSettings_SpeechSettings;
@class DLGRequestData;
@class DLGResourceReference;
@class DLGSelectable;
@class DLGSelectable_SelectableItem;
@class DLGSelectable_SelectableItem_SelectedValue;
@class DLGUserInput;
@class DLGUserInput_Interpretation;
@class DLGView;
@class DLGVxmlResourceReference;
@class DLGVxmlResourceReference_GrammarResourceReference;
@class GPBStruct;
@class InterpretResult;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum DLGResourceReference_EnumResourceType

typedef GPB_ENUM(DLGResourceReference_EnumResourceType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  DLGResourceReference_EnumResourceType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Dialog application model. */
  DLGResourceReference_EnumResourceType_ApplicationModel = 0,
};

GPBEnumDescriptor *DLGResourceReference_EnumResourceType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL DLGResourceReference_EnumResourceType_IsValidValue(int32_t value);

#pragma mark - Enum DLGMessage_TTSParameters_Voice_EnumGender

typedef GPB_ENUM(DLGMessage_TTSParameters_Voice_EnumGender) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  DLGMessage_TTSParameters_Voice_EnumGender_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Any gender voice. Default for SynthesisRequest. */
  DLGMessage_TTSParameters_Voice_EnumGender_Any = 0,

  /** Male voice. */
  DLGMessage_TTSParameters_Voice_EnumGender_Male = 1,

  /** Female voice. */
  DLGMessage_TTSParameters_Voice_EnumGender_Female = 2,

  /** Neutral gender voice. */
  DLGMessage_TTSParameters_Voice_EnumGender_Neutral = 3,
};

GPBEnumDescriptor *DLGMessage_TTSParameters_Voice_EnumGender_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL DLGMessage_TTSParameters_Voice_EnumGender_IsValidValue(int32_t value);

#pragma mark - Enum DLGVxmlResourceReference_GrammarResourceReference_EnumResourceType

typedef GPB_ENUM(DLGVxmlResourceReference_GrammarResourceReference_EnumResourceType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  DLGVxmlResourceReference_GrammarResourceReference_EnumResourceType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** A semantic model from Mix.nlu */
  DLGVxmlResourceReference_GrammarResourceReference_EnumResourceType_SemanticModel = 0,

  /** SRGS Grammar for speech(xml/gram/etc) */
  DLGVxmlResourceReference_GrammarResourceReference_EnumResourceType_SpeechGrammar = 1,

  /** SRGS Grammar for dtmf(xml/gram/etc) */
  DLGVxmlResourceReference_GrammarResourceReference_EnumResourceType_DtmfGrammar = 2,
  DLGVxmlResourceReference_GrammarResourceReference_EnumResourceType_AsrDlm = 3,
};

GPBEnumDescriptor *DLGVxmlResourceReference_GrammarResourceReference_EnumResourceType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL DLGVxmlResourceReference_GrammarResourceReference_EnumResourceType_IsValidValue(int32_t value);

#pragma mark - Enum DLGDialogEvent_EventType

/** The possible event types that can occur on the client side of interactions. */
typedef GPB_ENUM(DLGDialogEvent_EventType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  DLGDialogEvent_EventType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** Everything went as expected. */
  DLGDialogEvent_EventType_Success = 0,

  /** An unexpected problem occurred. */
  DLGDialogEvent_EventType_Error = 1,

  /** End user has not provided any input. */
  DLGDialogEvent_EventType_NoInput = 2,

  /** End user provided unrecognizable input. */
  DLGDialogEvent_EventType_NoMatch = 3,

  /** End user has hung up. Currently used for UVR interactions. */
  DLGDialogEvent_EventType_Hangup = 4,

  /** Custom event, expect event_name to be set */
  DLGDialogEvent_EventType_Custom = 5,
};

GPBEnumDescriptor *DLGDialogEvent_EventType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL DLGDialogEvent_EventType_IsValidValue(int32_t value);

#pragma mark - DLGDlgCommonMessagesRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface DLGDlgCommonMessagesRoot : GPBRootObject
@end

#pragma mark - DLGStartRequestPayload

typedef GPB_ENUM(DLGStartRequestPayload_FieldNumber) {
  DLGStartRequestPayload_FieldNumber_ModelRef = 1,
  DLGStartRequestPayload_FieldNumber_Data_p = 2,
  DLGStartRequestPayload_FieldNumber_SuppressLogUserData = 3,
};

/**
 * Payload sent with the Start request.
 **/
GPB_FINAL @interface DLGStartRequestPayload : GPBMessage

/** Reference object of the resource to use for the request. */
@property(nonatomic, readwrite, strong, null_resettable) DLGResourceReference *modelRef;
/** Test to see if @c modelRef has been set. */
@property(nonatomic, readwrite) BOOL hasModelRef;

/** Map of data sent in the request. */
@property(nonatomic, readwrite, strong, null_resettable) GPBStruct *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

/** Set to true to disable logging for ASR, NLU, TTS, and Dialog. */
@property(nonatomic, readwrite) BOOL suppressLogUserData;

@end

#pragma mark - DLGResourceReference

typedef GPB_ENUM(DLGResourceReference_FieldNumber) {
  DLGResourceReference_FieldNumber_Uri = 1,
  DLGResourceReference_FieldNumber_Type = 2,
};

/**
 * Reference object of the resource to use for the request (for example, URN or URL of the model)
 **/
GPB_FINAL @interface DLGResourceReference : GPBMessage

/** Reference (for example, the URL or URN). */
@property(nonatomic, readwrite, copy, null_resettable) NSString *uri;

/** Type of resource. */
@property(nonatomic, readwrite) DLGResourceReference_EnumResourceType type;

@end

/**
 * Fetches the raw value of a @c DLGResourceReference's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t DLGResourceReference_Type_RawValue(DLGResourceReference *message);
/**
 * Sets the raw value of an @c DLGResourceReference's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetDLGResourceReference_Type_RawValue(DLGResourceReference *message, int32_t value);

#pragma mark - DLGStartResponsePayload

typedef GPB_ENUM(DLGStartResponsePayload_FieldNumber) {
  DLGStartResponsePayload_FieldNumber_SessionId = 1,
};

/**
 * Payload returned after the Start method is called. If a session ID is not provided in the request, a new one is generated and should be used for subsequent calls.
 **/
GPB_FINAL @interface DLGStartResponsePayload : GPBMessage

/** Returns session ID to use for subsequent calls. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sessionId;

@end

#pragma mark - DLGUpdateRequestPayload

typedef GPB_ENUM(DLGUpdateRequestPayload_FieldNumber) {
  DLGUpdateRequestPayload_FieldNumber_Data_p = 1,
};

/**
 * Payload sent with the Update request.
 **/
GPB_FINAL @interface DLGUpdateRequestPayload : GPBMessage

/** Map of key-value pairs of session variables to update. */
@property(nonatomic, readwrite, strong, null_resettable) GPBStruct *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

#pragma mark - DLGExecuteRequestPayload

typedef GPB_ENUM(DLGExecuteRequestPayload_FieldNumber) {
  DLGExecuteRequestPayload_FieldNumber_UserInput = 1,
  DLGExecuteRequestPayload_FieldNumber_DialogEvent = 2,
  DLGExecuteRequestPayload_FieldNumber_RequestedData = 3,
};

/**
 * Payload sent with the Execute request. If both an event and a user input are provided, the event has precedence. For example, if
 * an error event is provided, the input will be ignored.
 **/
GPB_FINAL @interface DLGExecuteRequestPayload : GPBMessage

/** Input provided to the Dialog engine. */
@property(nonatomic, readwrite, strong, null_resettable) DLGUserInput *userInput;
/** Test to see if @c userInput has been set. */
@property(nonatomic, readwrite) BOOL hasUserInput;

/** Used to pass in events that can drive the flow. Optional; if an event is not passed, the operation is assumed to be successful. //TODO: Should this be seperated to be QA Node specific */
@property(nonatomic, readwrite, strong, null_resettable) DLGDialogEvent *dialogEvent;
/** Test to see if @c dialogEvent has been set. */
@property(nonatomic, readwrite) BOOL hasDialogEvent;

/** Data that was previously requested by engine. */
@property(nonatomic, readwrite, strong, null_resettable) DLGRequestData *requestedData;
/** Test to see if @c requestedData has been set. */
@property(nonatomic, readwrite) BOOL hasRequestedData;

@end

#pragma mark - DLGUserInput

typedef GPB_ENUM(DLGUserInput_FieldNumber) {
  DLGUserInput_FieldNumber_UserText = 1,
  DLGUserInput_FieldNumber_Interpretation = 2,
  DLGUserInput_FieldNumber_SelectedItem = 3,
  DLGUserInput_FieldNumber_NluaasInterpretation = 4,
  DLGUserInput_FieldNumber_InputMode = 20,
};

typedef GPB_ENUM(DLGUserInput_Input_OneOfCase) {
  DLGUserInput_Input_OneOfCase_GPBUnsetOneOfCase = 0,
  DLGUserInput_Input_OneOfCase_UserText = 1,
  DLGUserInput_Input_OneOfCase_Interpretation = 2,
  DLGUserInput_Input_OneOfCase_SelectedItem = 3,
  DLGUserInput_Input_OneOfCase_NluaasInterpretation = 4,
};

/**
 * Provides input to the Dialog engine. The client application sends either the text collected from the user, to be interpreted by Mix, or
 * an interpretation that was performed externally.
 **/
GPB_FINAL @interface DLGUserInput : GPBMessage

@property(nonatomic, readonly) DLGUserInput_Input_OneOfCase inputOneOfCase;

/** Text collected from end user. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *userText;

/** Interpretation that was done externally (e.g., Nuance Recognizer for VoiceXML). This can be used for simple interpretations that include entities with string values only. Use nluaas_interpretation for interpretations that include complex entities. */
@property(nonatomic, readwrite, strong, null_resettable) DLGUserInput_Interpretation *interpretation;

/** Value of element selected by end user. */
@property(nonatomic, readwrite, strong, null_resettable) DLGSelectable_SelectableItem_SelectedValue *selectedItem;

/** Interpretation that was done externally (e.g., Nuance Recognizer for VoiceXML), provided in the NLUaaS format. */
@property(nonatomic, readwrite, strong, null_resettable) InterpretResult *nluaasInterpretation;

/** Optional: Input mode. Used for reporting. Current values are dtmf/voice. Applies to user_text and nluaas_interpretation input only. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *inputMode;

@end

/**
 * Clears whatever value was set for the oneof 'input'.
 **/
void DLGUserInput_ClearInputOneOfCase(DLGUserInput *message);

#pragma mark - DLGUserInput_Interpretation

typedef GPB_ENUM(DLGUserInput_Interpretation_FieldNumber) {
  DLGUserInput_Interpretation_FieldNumber_Confidence = 1,
  DLGUserInput_Interpretation_FieldNumber_InputMode = 2,
  DLGUserInput_Interpretation_FieldNumber_Utterance = 3,
  DLGUserInput_Interpretation_FieldNumber_Data_p = 4,
  DLGUserInput_Interpretation_FieldNumber_SlotLiterals = 5,
  DLGUserInput_Interpretation_FieldNumber_AlternativeInterpretationsArray = 6,
  DLGUserInput_Interpretation_FieldNumber_SlotConfidences = 7,
  DLGUserInput_Interpretation_FieldNumber_SlotFormattedLiterals = 8,
};

/**
 * Sends interpretation data.
 **/
GPB_FINAL @interface DLGUserInput_Interpretation : GPBMessage

/** Required: Value from 0..1 that indicates the confidence of the interpretation. */
@property(nonatomic, readwrite) float confidence;

/** Optional: Input mode. Current values are dtmf/voice (but input mode not limited to these). */
@property(nonatomic, readwrite, copy, null_resettable) NSString *inputMode;

/** Raw collected text. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *utterance;

/** Data from the interpretation of intents and entities. For example, INTENT:BILL_PAY or or AMOUNT:100. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *data_p;
/** The number of items in @c data_p without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger data_p_Count;

/** Slot literals from the interpretation of the entities. The slot literal provides the exact words used by the user. For example, AMOUNT: One hundred dollars. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *slotLiterals;
/** The number of items in @c slotLiterals without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger slotLiterals_Count;

/** Slot formatted literals from the interpretation of the entities. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *slotFormattedLiterals;
/** The number of items in @c slotFormattedLiterals without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger slotFormattedLiterals_Count;

/** Alternative interpretations possible from the interaction, that is, n-best list. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DLGUserInput_Interpretation*> *alternativeInterpretationsArray;
/** The number of items in @c alternativeInterpretationsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger alternativeInterpretationsArray_Count;

/** Slot confidence values from the interpretation of the entities. */
@property(nonatomic, readwrite, strong, null_resettable) GPBStringFloatDictionary *slotConfidences;
/** The number of items in @c slotConfidences without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger slotConfidences_Count;

@end

#pragma mark - DLGRequestData

typedef GPB_ENUM(DLGRequestData_FieldNumber) {
  DLGRequestData_FieldNumber_Id_p = 1,
  DLGRequestData_FieldNumber_Data_p = 2,
};

/**
 * Data that was requested by the dialog application.
 **/
GPB_FINAL @interface DLGRequestData : GPBMessage

/** ID used by the dialog application to identify which node requested the data. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** Map of keys to json objects of the data requested. */
@property(nonatomic, readwrite, strong, null_resettable) GPBStruct *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

@end

#pragma mark - DLGExecuteResponsePayload

typedef GPB_ENUM(DLGExecuteResponsePayload_FieldNumber) {
  DLGExecuteResponsePayload_FieldNumber_MessagesArray = 1,
  DLGExecuteResponsePayload_FieldNumber_QaAction = 2,
  DLGExecuteResponsePayload_FieldNumber_DaAction = 3,
  DLGExecuteResponsePayload_FieldNumber_EscalationAction = 4,
  DLGExecuteResponsePayload_FieldNumber_EndAction = 5,
  DLGExecuteResponsePayload_FieldNumber_ContinueAction = 6,
};

typedef GPB_ENUM(DLGExecuteResponsePayload_Action_OneOfCase) {
  DLGExecuteResponsePayload_Action_OneOfCase_GPBUnsetOneOfCase = 0,
  DLGExecuteResponsePayload_Action_OneOfCase_QaAction = 2,
  DLGExecuteResponsePayload_Action_OneOfCase_DaAction = 3,
  DLGExecuteResponsePayload_Action_OneOfCase_EscalationAction = 4,
  DLGExecuteResponsePayload_Action_OneOfCase_EndAction = 5,
  DLGExecuteResponsePayload_Action_OneOfCase_ContinueAction = 6,
};

/**
 * Payload returned after the Execute method is called.
 * Specifies the action to be performed by the client application.
 **/
GPB_FINAL @interface DLGExecuteResponsePayload : GPBMessage

/** Message action to be performed by the client application. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DLGMessage*> *messagesArray;
/** The number of items in @c messagesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger messagesArray_Count;

@property(nonatomic, readonly) DLGExecuteResponsePayload_Action_OneOfCase actionOneOfCase;

/** Question and Answer action to be performed by the client application. */
@property(nonatomic, readwrite, strong, null_resettable) DLGQAAction *qaAction;

/** Data Access action to be performed by the client application. */
@property(nonatomic, readwrite, strong, null_resettable) DLGDAAction *daAction;

/** Escalation action to be performed by the client application. */
@property(nonatomic, readwrite, strong, null_resettable) DLGEscalationAction *escalationAction;

/** End action to be performed by the client application. */
@property(nonatomic, readwrite, strong, null_resettable) DLGEndAction *endAction;

/** Continue action to be performed by the client application. */
@property(nonatomic, readwrite, strong, null_resettable) DLGContinueAction *continueAction;

@end

/**
 * Clears whatever value was set for the oneof 'action'.
 **/
void DLGExecuteResponsePayload_ClearActionOneOfCase(DLGExecuteResponsePayload *message);

#pragma mark - DLGMessage

typedef GPB_ENUM(DLGMessage_FieldNumber) {
  DLGMessage_FieldNumber_NlgArray = 1,
  DLGMessage_FieldNumber_VisualArray = 2,
  DLGMessage_FieldNumber_AudioArray = 3,
  DLGMessage_FieldNumber_View = 4,
  DLGMessage_FieldNumber_Language = 5,
  DLGMessage_FieldNumber_TtsParameters = 6,
};

/**
 * Specifies the message to be played to the user.
 **/
GPB_FINAL @interface DLGMessage : GPBMessage

/** Text to be played using Text-to-speech. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DLGMessage_Nlg*> *nlgArray;
/** The number of items in @c nlgArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger nlgArray_Count;

/** Text to be displayed to the user (for example, in a chat). */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DLGMessage_Visual*> *visualArray;
/** The number of items in @c visualArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger visualArray_Count;

/** Prompt to be played from an audio file. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DLGMessage_Audio*> *audioArray;
/** The number of items in @c audioArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger audioArray_Count;

/** View details for this message. */
@property(nonatomic, readwrite, strong, null_resettable) DLGView *view;
/** Test to see if @c view has been set. */
@property(nonatomic, readwrite) BOOL hasView;

/** Message language in xx-XX format, e.g. en-US */
@property(nonatomic, readwrite, copy, null_resettable) NSString *language;

@property(nonatomic, readwrite, strong, null_resettable) DLGMessage_TTSParameters *ttsParameters;
/** Test to see if @c ttsParameters has been set. */
@property(nonatomic, readwrite) BOOL hasTtsParameters;

@end

#pragma mark - DLGMessage_Nlg

typedef GPB_ENUM(DLGMessage_Nlg_FieldNumber) {
  DLGMessage_Nlg_FieldNumber_Text = 1,
  DLGMessage_Nlg_FieldNumber_Mask = 2,
  DLGMessage_Nlg_FieldNumber_BargeInDisabled = 3,
};

GPB_FINAL @interface DLGMessage_Nlg : GPBMessage

/** Text to be played using Text-to-speech. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;

/** When set to true, indicates that the text contains sensitive data that will be masked in logs. */
@property(nonatomic, readwrite) BOOL mask;

/** When set to true, indicates that barge-in is disabled. */
@property(nonatomic, readwrite) BOOL bargeInDisabled;

@end

#pragma mark - DLGMessage_Visual

typedef GPB_ENUM(DLGMessage_Visual_FieldNumber) {
  DLGMessage_Visual_FieldNumber_Text = 1,
  DLGMessage_Visual_FieldNumber_Mask = 2,
  DLGMessage_Visual_FieldNumber_BargeInDisabled = 3,
};

GPB_FINAL @interface DLGMessage_Visual : GPBMessage

/** Text to be displayed to the user (for example, in a chat). */
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;

/** When set to true, indicates that the text contains sensitive data that will be masked in logs. */
@property(nonatomic, readwrite) BOOL mask;

/** When set to true, indicates that barge-in is disabled. */
@property(nonatomic, readwrite) BOOL bargeInDisabled;

@end

#pragma mark - DLGMessage_Audio

typedef GPB_ENUM(DLGMessage_Audio_FieldNumber) {
  DLGMessage_Audio_FieldNumber_Text = 1,
  DLGMessage_Audio_FieldNumber_Uri = 2,
  DLGMessage_Audio_FieldNumber_Mask = 3,
  DLGMessage_Audio_FieldNumber_BargeInDisabled = 4,
};

typedef GPB_ENUM(DLGMessage_Audio_AudioSrc_OneOfCase) {
  DLGMessage_Audio_AudioSrc_OneOfCase_GPBUnsetOneOfCase = 0,
  DLGMessage_Audio_AudioSrc_OneOfCase_Uri = 2,
};

GPB_FINAL @interface DLGMessage_Audio : GPBMessage

/** Text of the prompt to be played. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *text;

@property(nonatomic, readonly) DLGMessage_Audio_AudioSrc_OneOfCase audioSrcOneOfCase;

/** Uri to the audio file. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *uri;

/** When set to true, indicates that the text or audio contains sensitive data that will be masked in logs. */
@property(nonatomic, readwrite) BOOL mask;

/** When set to true, indicates that barge-in is disabled. */
@property(nonatomic, readwrite) BOOL bargeInDisabled;

@end

/**
 * Clears whatever value was set for the oneof 'audioSrc'.
 **/
void DLGMessage_Audio_ClearAudioSrcOneOfCase(DLGMessage_Audio *message);

#pragma mark - DLGMessage_TTSParameters

typedef GPB_ENUM(DLGMessage_TTSParameters_FieldNumber) {
  DLGMessage_TTSParameters_FieldNumber_Voice = 1,
};

GPB_FINAL @interface DLGMessage_TTSParameters : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) DLGMessage_TTSParameters_Voice *voice;
/** Test to see if @c voice has been set. */
@property(nonatomic, readwrite) BOOL hasVoice;

@end

#pragma mark - DLGMessage_TTSParameters_Voice

typedef GPB_ENUM(DLGMessage_TTSParameters_Voice_FieldNumber) {
  DLGMessage_TTSParameters_Voice_FieldNumber_Name = 1,
  DLGMessage_TTSParameters_Voice_FieldNumber_Model = 2,
  DLGMessage_TTSParameters_Voice_FieldNumber_Gender = 3,
  DLGMessage_TTSParameters_Voice_FieldNumber_Language = 4,
};

GPB_FINAL @interface DLGMessage_TTSParameters_Voice : GPBMessage

/** The voice's name, e.g. 'Evan'. Mandatory for SynthesizeRequest. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** The voice's quality model, e.g. 'xpremium' or 'xpremium-high'. Mandatory for SynthesizeRequest. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *model;

/** Voice gender. Default ANY for SynthesisRequest. */
@property(nonatomic, readwrite) DLGMessage_TTSParameters_Voice_EnumGender gender;

/** Voice language */
@property(nonatomic, readwrite, copy, null_resettable) NSString *language;

@end

/**
 * Fetches the raw value of a @c DLGMessage_TTSParameters_Voice's @c gender property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t DLGMessage_TTSParameters_Voice_Gender_RawValue(DLGMessage_TTSParameters_Voice *message);
/**
 * Sets the raw value of an @c DLGMessage_TTSParameters_Voice's @c gender property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetDLGMessage_TTSParameters_Voice_Gender_RawValue(DLGMessage_TTSParameters_Voice *message, int32_t value);

#pragma mark - DLGView

typedef GPB_ENUM(DLGView_FieldNumber) {
  DLGView_FieldNumber_Id_p = 1,
  DLGView_FieldNumber_Name = 2,
};

/**
 * Specifies view details for this action.
 **/
GPB_FINAL @interface DLGView : GPBMessage

/** Class or CSS defined for the view details in the node. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** Type defined for the view details in the node. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@end

#pragma mark - DLGSelectable

typedef GPB_ENUM(DLGSelectable_FieldNumber) {
  DLGSelectable_FieldNumber_SelectableItemsArray = 1,
};

/**
 * Interactive elements to be displayed by the client app, such as clickable buttons or links.
 **/
GPB_FINAL @interface DLGSelectable : GPBMessage

/** Ordered list of interactive elements. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DLGSelectable_SelectableItem*> *selectableItemsArray;
/** The number of items in @c selectableItemsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger selectableItemsArray_Count;

@end

#pragma mark - DLGSelectable_SelectableItem

typedef GPB_ENUM(DLGSelectable_SelectableItem_FieldNumber) {
  DLGSelectable_SelectableItem_FieldNumber_Value = 1,
  DLGSelectable_SelectableItem_FieldNumber_Description_p = 2,
  DLGSelectable_SelectableItem_FieldNumber_DisplayText = 3,
  DLGSelectable_SelectableItem_FieldNumber_DisplayImageUri = 4,
};

GPB_FINAL @interface DLGSelectable_SelectableItem : GPBMessage

/** Key-value pair of entity information (name and value) for the interactive element. A selected key-value pair is passed in an ExecuteRequest when the user interacts with the element. */
@property(nonatomic, readwrite, strong, null_resettable) DLGSelectable_SelectableItem_SelectedValue *value;
/** Test to see if @c value has been set. */
@property(nonatomic, readwrite) BOOL hasValue;

/** Description of the interactive element. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/** Label to display for this interactive element. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *displayText;

/** URI of image to display for this interactive element. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *displayImageUri;

@end

#pragma mark - DLGSelectable_SelectableItem_SelectedValue

typedef GPB_ENUM(DLGSelectable_SelectableItem_SelectedValue_FieldNumber) {
  DLGSelectable_SelectableItem_SelectedValue_FieldNumber_Id_p = 1,
  DLGSelectable_SelectableItem_SelectedValue_FieldNumber_Value = 2,
};

GPB_FINAL @interface DLGSelectable_SelectableItem_SelectedValue : GPBMessage

/** Name of the entity being collected. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** Entity value corresponding to the interactive element. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *value;

@end

#pragma mark - DLGRecognitionSettings

typedef GPB_ENUM(DLGRecognitionSettings_FieldNumber) {
  DLGRecognitionSettings_FieldNumber_DtmfMappingsArray = 1,
  DLGRecognitionSettings_FieldNumber_CollectionSettings = 2,
  DLGRecognitionSettings_FieldNumber_SpeechSettings = 3,
  DLGRecognitionSettings_FieldNumber_DtmfSettings = 4,
};

/**
 * Configuration information to be used during recognition.
 **/
GPB_FINAL @interface DLGRecognitionSettings : GPBMessage

/** DTMF mappings configured in Mix.dialog. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DLGRecognitionSettings_DtmfMapping*> *dtmfMappingsArray;
/** The number of items in @c dtmfMappingsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger dtmfMappingsArray_Count;

/** Collection settings configured in Mix.dialog. */
@property(nonatomic, readwrite, strong, null_resettable) DLGRecognitionSettings_CollectionSettings *collectionSettings;
/** Test to see if @c collectionSettings has been set. */
@property(nonatomic, readwrite) BOOL hasCollectionSettings;

/** Speech settings configured in Mix.dialog. */
@property(nonatomic, readwrite, strong, null_resettable) DLGRecognitionSettings_SpeechSettings *speechSettings;
/** Test to see if @c speechSettings has been set. */
@property(nonatomic, readwrite) BOOL hasSpeechSettings;

/** DTMF settings configured in Mix.dialog. */
@property(nonatomic, readwrite, strong, null_resettable) DLGRecognitionSettings_DtmfSettings *dtmfSettings;
/** Test to see if @c dtmfSettings has been set. */
@property(nonatomic, readwrite) BOOL hasDtmfSettings;

@end

#pragma mark - DLGRecognitionSettings_DtmfMapping

typedef GPB_ENUM(DLGRecognitionSettings_DtmfMapping_FieldNumber) {
  DLGRecognitionSettings_DtmfMapping_FieldNumber_Id_p = 1,
  DLGRecognitionSettings_DtmfMapping_FieldNumber_Value = 2,
  DLGRecognitionSettings_DtmfMapping_FieldNumber_DtmfKey = 3,
};

/**
 * DTMF mappings configured in Mix.dialog.
 **/
GPB_FINAL @interface DLGRecognitionSettings_DtmfMapping : GPBMessage

/** ID of the entity to which the DTMF mapping applies. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** Entity value to map to a DTMF key. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *value;

/** DTMF key associated with this entity value. (0-9,*,#) */
@property(nonatomic, readwrite, copy, null_resettable) NSString *dtmfKey;

@end

#pragma mark - DLGRecognitionSettings_CollectionSettings

typedef GPB_ENUM(DLGRecognitionSettings_CollectionSettings_FieldNumber) {
  DLGRecognitionSettings_CollectionSettings_FieldNumber_Timeout = 1,
  DLGRecognitionSettings_CollectionSettings_FieldNumber_CompleteTimeout = 2,
  DLGRecognitionSettings_CollectionSettings_FieldNumber_IncompleteTimeout = 3,
  DLGRecognitionSettings_CollectionSettings_FieldNumber_MaxSpeechTimeout = 4,
};

/**
 * Collection settings configured in Mix.dialog.
 **/
GPB_FINAL @interface DLGRecognitionSettings_CollectionSettings : GPBMessage

/** Time, in ms, to wait for speech once a prompt has finished playing before throwing a NO_INPUT event. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *timeout;

/** Duration of silence, in ms, to determine the user has finished speaking. The timer starts when the recognizer has a well-formed hypothesis. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *completeTimeout;

/** Duration of silence, in ms, to determine the user has finished speaking. The timer starts when the user stops speaking. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *incompleteTimeout;

/** Maximum duration, in ms, of an utterance collected from the user. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *maxSpeechTimeout;

@end

#pragma mark - DLGRecognitionSettings_SpeechSettings

typedef GPB_ENUM(DLGRecognitionSettings_SpeechSettings_FieldNumber) {
  DLGRecognitionSettings_SpeechSettings_FieldNumber_Sensitivity = 1,
  DLGRecognitionSettings_SpeechSettings_FieldNumber_BargeInType = 2,
  DLGRecognitionSettings_SpeechSettings_FieldNumber_SpeedVsAccuracy = 3,
};

/**
 * Speech settings configured in Mix.dialog.
 **/
GPB_FINAL @interface DLGRecognitionSettings_SpeechSettings : GPBMessage

/** Level of sensitivity to speech. 1.0 means highly sensitive to quiet input, while 0.0 means least sensitive to noise. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *sensitivity;

/** Barge-in type; possible values: "speech" (interrupt a prompt by using any word) and "hotword" (interrupt a prompt by using a specific hotword). */
@property(nonatomic, readwrite, copy, null_resettable) NSString *bargeInType;

/** Desired balance betweemrn speed and accuracy. 0.0 means fastest recognition, while 1.0 means best accuracy. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *speedVsAccuracy;

@end

#pragma mark - DLGRecognitionSettings_DtmfSettings

typedef GPB_ENUM(DLGRecognitionSettings_DtmfSettings_FieldNumber) {
  DLGRecognitionSettings_DtmfSettings_FieldNumber_InterDigitTimeout = 1,
  DLGRecognitionSettings_DtmfSettings_FieldNumber_TermTimeout = 2,
  DLGRecognitionSettings_DtmfSettings_FieldNumber_TermChar = 3,
};

/**
 * DTMF settings configured in Mix.dialog.
 **/
GPB_FINAL @interface DLGRecognitionSettings_DtmfSettings : GPBMessage

/** Maximum time, in ms, allowed between each DTMF character entered by the user. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *interDigitTimeout;

/** Maximum time, in ms, to wait for an additional DTMF character before terminating the input. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *termTimeout;

/** Character that terminates a DTMF input. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *termChar;

@end

#pragma mark - DLGMessageSettings

typedef GPB_ENUM(DLGMessageSettings_FieldNumber) {
  DLGMessageSettings_FieldNumber_Delay = 1,
  DLGMessageSettings_FieldNumber_Minimum = 2,
};

/**
 * Settings to be used with messages returned by DAAction or ContinueAction
 **/
GPB_FINAL @interface DLGMessageSettings : GPBMessage

/** Time in ms to wait before presenting user with message; */
@property(nonatomic, readwrite, copy, null_resettable) NSString *delay;

/** Time in ms to display/play message to user. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *minimum;

@end

#pragma mark - DLGBackendConnectionSettings

typedef GPB_ENUM(DLGBackendConnectionSettings_FieldNumber) {
  DLGBackendConnectionSettings_FieldNumber_FetchTimeout = 1,
  DLGBackendConnectionSettings_FieldNumber_ConnectTimeout = 2,
};

/**
 * Settings configured in Mix tooling controlling the connection to the custom backend
 **/
GPB_FINAL @interface DLGBackendConnectionSettings : GPBMessage

/** Number of milliseconds allowed for fetching the data before timing out. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *fetchTimeout;

/** Connect timeout in milliseconds. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *connectTimeout;

@end

#pragma mark - DLGQAAction

typedef GPB_ENUM(DLGQAAction_FieldNumber) {
  DLGQAAction_FieldNumber_Message = 1,
  DLGQAAction_FieldNumber_Data_p = 2,
  DLGQAAction_FieldNumber_View = 3,
  DLGQAAction_FieldNumber_Selectable = 4,
  DLGQAAction_FieldNumber_RecognitionSettings = 5,
  DLGQAAction_FieldNumber_Mask = 6,
};

/**
 * Question and Answer action to be performed by the client application.
 **/
GPB_FINAL @interface DLGQAAction : GPBMessage

/** Message to be played as part of the Q&A action. */
@property(nonatomic, readwrite, strong, null_resettable) DLGMessage *message;
/** Test to see if @c message has been set. */
@property(nonatomic, readwrite) BOOL hasMessage;

/** Map of data exchanged in this node. */
@property(nonatomic, readwrite, strong, null_resettable) GPBStruct *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

/** View details for this action. */
@property(nonatomic, readwrite, strong, null_resettable) DLGView *view;
/** Test to see if @c view has been set. */
@property(nonatomic, readwrite) BOOL hasView;

/** Interactive elements to be displayed by the client app, such as clickable buttons or links. */
@property(nonatomic, readwrite, strong, null_resettable) DLGSelectable *selectable;
/** Test to see if @c selectable has been set. */
@property(nonatomic, readwrite) BOOL hasSelectable;

/** Configuration information to be used during recognition. */
@property(nonatomic, readwrite, strong, null_resettable) DLGRecognitionSettings *recognitionSettings;
/** Test to see if @c recognitionSettings has been set. */
@property(nonatomic, readwrite) BOOL hasRecognitionSettings;

/** When set to true, indicates that the Question and Answer node is meant to collect an entity that will hold sensitive data to be masked in logs. */
@property(nonatomic, readwrite) BOOL mask;

@end

#pragma mark - DLGDAAction

typedef GPB_ENUM(DLGDAAction_FieldNumber) {
  DLGDAAction_FieldNumber_Id_p = 1,
  DLGDAAction_FieldNumber_Message = 2,
  DLGDAAction_FieldNumber_View = 3,
  DLGDAAction_FieldNumber_Data_p = 4,
  DLGDAAction_FieldNumber_MessageSettings = 5,
};

/**
 * Data Access action to be performed by the client application.
 **/
GPB_FINAL @interface DLGDAAction : GPBMessage

/** ID identifying the Data Access node in the dialog application. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** Message to be played as part of the Data Access action. */
@property(nonatomic, readwrite, strong, null_resettable) DLGMessage *message;
/** Test to see if @c message has been set. */
@property(nonatomic, readwrite) BOOL hasMessage;

/** View details for this action. */
@property(nonatomic, readwrite, strong, null_resettable) DLGView *view;
/** Test to see if @c view has been set. */
@property(nonatomic, readwrite) BOOL hasView;

/** Map of data exchanged in this node. */
@property(nonatomic, readwrite, strong, null_resettable) GPBStruct *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

/** Settings to be used along with messages returned to present user with the messages. */
@property(nonatomic, readwrite, strong, null_resettable) DLGMessageSettings *messageSettings;
/** Test to see if @c messageSettings has been set. */
@property(nonatomic, readwrite) BOOL hasMessageSettings;

@end

#pragma mark - DLGEscalationAction

typedef GPB_ENUM(DLGEscalationAction_FieldNumber) {
  DLGEscalationAction_FieldNumber_Message = 1,
  DLGEscalationAction_FieldNumber_View = 2,
  DLGEscalationAction_FieldNumber_Data_p = 3,
  DLGEscalationAction_FieldNumber_Id_p = 4,
};

/**
 * Escalation action to be performed by the client application.
 **/
GPB_FINAL @interface DLGEscalationAction : GPBMessage

/** Message to be played as part of the escalation action. */
@property(nonatomic, readwrite, strong, null_resettable) DLGMessage *message;
/** Test to see if @c message has been set. */
@property(nonatomic, readwrite) BOOL hasMessage;

/** View details for this action. */
@property(nonatomic, readwrite, strong, null_resettable) DLGView *view;
/** Test to see if @c view has been set. */
@property(nonatomic, readwrite) BOOL hasView;

/** Map of data exchanged in this node. */
@property(nonatomic, readwrite, strong, null_resettable) GPBStruct *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

/** ID identifying the External Action node in the dialog application. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@end

#pragma mark - DLGEndAction

typedef GPB_ENUM(DLGEndAction_FieldNumber) {
  DLGEndAction_FieldNumber_Data_p = 1,
  DLGEndAction_FieldNumber_Id_p = 2,
};

/**
 * End node, indicates that the dialog has ended.
 **/
GPB_FINAL @interface DLGEndAction : GPBMessage

/** Map of data exchanged in this node. */
@property(nonatomic, readwrite, strong, null_resettable) GPBStruct *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

/** ID identifying the End Action node in the dialog application. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@end

#pragma mark - DLGContinueAction

typedef GPB_ENUM(DLGContinueAction_FieldNumber) {
  DLGContinueAction_FieldNumber_Message = 1,
  DLGContinueAction_FieldNumber_View = 2,
  DLGContinueAction_FieldNumber_Data_p = 3,
  DLGContinueAction_FieldNumber_Id_p = 4,
  DLGContinueAction_FieldNumber_MessageSettings = 5,
  DLGContinueAction_FieldNumber_BackendConnectionSettings = 6,
};

/**
 * Continue action to be performed by the client application.
 **/
GPB_FINAL @interface DLGContinueAction : GPBMessage

/** Message to be played as part of the continue action. */
@property(nonatomic, readwrite, strong, null_resettable) DLGMessage *message;
/** Test to see if @c message has been set. */
@property(nonatomic, readwrite) BOOL hasMessage;

/** View details for this action. */
@property(nonatomic, readwrite, strong, null_resettable) DLGView *view;
/** Test to see if @c view has been set. */
@property(nonatomic, readwrite) BOOL hasView;

/** Map of data exchanged in this node. */
@property(nonatomic, readwrite, strong, null_resettable) GPBStruct *data_p;
/** Test to see if @c data_p has been set. */
@property(nonatomic, readwrite) BOOL hasData_p;

/** ID identifying the Continue Action node in the dialog application. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

/** Settings to be used along with messages returned to present user with the messages. */
@property(nonatomic, readwrite, strong, null_resettable) DLGMessageSettings *messageSettings;
/** Test to see if @c messageSettings has been set. */
@property(nonatomic, readwrite) BOOL hasMessageSettings;

/** Setting that will be used by platform for connecting and fetching from the backend. Only returned when continue action proceeds a backend/DA node. */
@property(nonatomic, readwrite, strong, null_resettable) DLGBackendConnectionSettings *backendConnectionSettings;
/** Test to see if @c backendConnectionSettings has been set. */
@property(nonatomic, readwrite) BOOL hasBackendConnectionSettings;

@end

#pragma mark - DLGVxmlConfiguration

typedef GPB_ENUM(DLGVxmlConfiguration_FieldNumber) {
  DLGVxmlConfiguration_FieldNumber_ResourcesArray = 1,
  DLGVxmlConfiguration_FieldNumber_Properties = 2,
};

GPB_FINAL @interface DLGVxmlConfiguration : GPBMessage

/** Contains references to external resources like NLU/ASR models */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DLGVxmlResourceReference*> *resourcesArray;
/** The number of items in @c resourcesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger resourcesArray_Count;

/** Settings related to things like recognition/etc. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *properties;
/** The number of items in @c properties without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger properties_Count;

@end

#pragma mark - DLGVxmlResourceReference

typedef GPB_ENUM(DLGVxmlResourceReference_FieldNumber) {
  DLGVxmlResourceReference_FieldNumber_GrammarReference = 1,
  DLGVxmlResourceReference_FieldNumber_WordsetJson = 2,
};

typedef GPB_ENUM(DLGVxmlResourceReference_ResourceUnion_OneOfCase) {
  DLGVxmlResourceReference_ResourceUnion_OneOfCase_GPBUnsetOneOfCase = 0,
  DLGVxmlResourceReference_ResourceUnion_OneOfCase_GrammarReference = 1,
  DLGVxmlResourceReference_ResourceUnion_OneOfCase_WordsetJson = 2,
};

GPB_FINAL @interface DLGVxmlResourceReference : GPBMessage

@property(nonatomic, readonly) DLGVxmlResourceReference_ResourceUnion_OneOfCase resourceUnionOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) DLGVxmlResourceReference_GrammarResourceReference *grammarReference;

@property(nonatomic, readwrite, copy, null_resettable) NSString *wordsetJson;

@end

/**
 * Clears whatever value was set for the oneof 'resourceUnion'.
 **/
void DLGVxmlResourceReference_ClearResourceUnionOneOfCase(DLGVxmlResourceReference *message);

#pragma mark - DLGVxmlResourceReference_GrammarResourceReference

typedef GPB_ENUM(DLGVxmlResourceReference_GrammarResourceReference_FieldNumber) {
  DLGVxmlResourceReference_GrammarResourceReference_FieldNumber_Uri = 1,
  DLGVxmlResourceReference_GrammarResourceReference_FieldNumber_Type = 2,
};

/**
 * Reference object of the resource to use for the request (for example, URN or URL of the model)
 **/
GPB_FINAL @interface DLGVxmlResourceReference_GrammarResourceReference : GPBMessage

/** Reference (for example, the URL or URN). */
@property(nonatomic, readwrite, copy, null_resettable) NSString *uri;

/** Type of resource. */
@property(nonatomic, readwrite) DLGVxmlResourceReference_GrammarResourceReference_EnumResourceType type;

@end

/**
 * Fetches the raw value of a @c DLGVxmlResourceReference_GrammarResourceReference's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t DLGVxmlResourceReference_GrammarResourceReference_Type_RawValue(DLGVxmlResourceReference_GrammarResourceReference *message);
/**
 * Sets the raw value of an @c DLGVxmlResourceReference_GrammarResourceReference's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetDLGVxmlResourceReference_GrammarResourceReference_Type_RawValue(DLGVxmlResourceReference_GrammarResourceReference *message, int32_t value);

#pragma mark - DLGDialogEvent

typedef GPB_ENUM(DLGDialogEvent_FieldNumber) {
  DLGDialogEvent_FieldNumber_Type = 1,
  DLGDialogEvent_FieldNumber_Message = 2,
  DLGDialogEvent_FieldNumber_EventName = 3,
};

/**
 * Message used to indicate an event that occurred during the dialog interactions.
 **/
GPB_FINAL @interface DLGDialogEvent : GPBMessage

/** Type of event being triggered. */
@property(nonatomic, readwrite) DLGDialogEvent_EventType type;

/** Optional message providing additional information about the event. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *message;

/** Only used when type is set to CUSTOM */
@property(nonatomic, readwrite, copy, null_resettable) NSString *eventName;

@end

/**
 * Fetches the raw value of a @c DLGDialogEvent's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t DLGDialogEvent_Type_RawValue(DLGDialogEvent *message);
/**
 * Sets the raw value of an @c DLGDialogEvent's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetDLGDialogEvent_Type_RawValue(DLGDialogEvent *message, int32_t value);

#pragma mark - DLGSelector

typedef GPB_ENUM(DLGSelector_FieldNumber) {
  DLGSelector_FieldNumber_Channel = 1,
  DLGSelector_FieldNumber_Language = 2,
  DLGSelector_FieldNumber_Library = 3,
};

/**
 * Provides channel and language used for the conversation.
 **/
GPB_FINAL @interface DLGSelector : GPBMessage

/** Optional: Channel that this conversation is going to use (for example, WebVA). */
@property(nonatomic, readwrite, copy, null_resettable) NSString *channel;

/** Optional: Language to use for this conversation. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *language;

/** Optional: Library to use for this conversation. Advanced customization reserved for future use. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *library;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
