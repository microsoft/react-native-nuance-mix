// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nuance_asr.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "NuanceAsr.pbobjc.h"
#import "NuanceAsrResource.pbobjc.h"
#import "NuanceAsrResult.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ASRALaw);
GPBObjCClassDeclaration(ASRAudioFormat);
GPBObjCClassDeclaration(ASRControlMessage);
GPBObjCClassDeclaration(ASRFormatting);
GPBObjCClassDeclaration(ASROggOpus);
GPBObjCClassDeclaration(ASROpus);
GPBObjCClassDeclaration(ASRPCM);
GPBObjCClassDeclaration(ASRRecognitionFlags);
GPBObjCClassDeclaration(ASRRecognitionInitMessage);
GPBObjCClassDeclaration(ASRRecognitionParameters);
GPBObjCClassDeclaration(ASRRecognitionResource);
GPBObjCClassDeclaration(ASRResult);
GPBObjCClassDeclaration(ASRStartOfSpeech);
GPBObjCClassDeclaration(ASRStartTimersControlMessage);
GPBObjCClassDeclaration(ASRStatus);
GPBObjCClassDeclaration(ASRULaw);

#pragma mark - ASRNuanceAsrRoot

@implementation ASRNuanceAsrRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ASRNuanceAsrRoot_FileDescriptor

static GPBFileDescriptor *ASRNuanceAsrRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"nuance.asr.v1"
                                                 objcPrefix:@"ASR"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum ASREnumUtteranceDetectionMode

GPBEnumDescriptor *ASREnumUtteranceDetectionMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Single\000Multiple\000Disabled\000";
    static const int32_t values[] = {
        ASREnumUtteranceDetectionMode_Single,
        ASREnumUtteranceDetectionMode_Multiple,
        ASREnumUtteranceDetectionMode_Disabled,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ASREnumUtteranceDetectionMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ASREnumUtteranceDetectionMode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ASREnumUtteranceDetectionMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case ASREnumUtteranceDetectionMode_Single:
    case ASREnumUtteranceDetectionMode_Multiple:
    case ASREnumUtteranceDetectionMode_Disabled:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ASRRecognitionRequest

@implementation ASRRecognitionRequest

@dynamic requestUnionOneOfCase;
@dynamic recognitionInitMessage;
@dynamic controlMessage;
@dynamic audio;

typedef struct ASRRecognitionRequest__storage_ {
  uint32_t _has_storage_[2];
  ASRRecognitionInitMessage *recognitionInitMessage;
  ASRControlMessage *controlMessage;
  NSData *audio;
} ASRRecognitionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recognitionInitMessage",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRRecognitionInitMessage),
        .number = ASRRecognitionRequest_FieldNumber_RecognitionInitMessage,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ASRRecognitionRequest__storage_, recognitionInitMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "controlMessage",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRControlMessage),
        .number = ASRRecognitionRequest_FieldNumber_ControlMessage,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ASRRecognitionRequest__storage_, controlMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audio",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionRequest_FieldNumber_Audio,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ASRRecognitionRequest__storage_, audio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRRecognitionRequest class]
                                     rootClass:[ASRNuanceAsrRoot class]
                                          file:ASRNuanceAsrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRRecognitionRequest__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "requestUnion",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ASRRecognitionRequest_ClearRequestUnionOneOfCase(ASRRecognitionRequest *message) {
  GPBDescriptor *descriptor = [ASRRecognitionRequest descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - ASRRecognitionInitMessage

@implementation ASRRecognitionInitMessage

@dynamic hasParameters, parameters;
@dynamic resourcesArray, resourcesArray_Count;
@dynamic clientData, clientData_Count;
@dynamic userId;

typedef struct ASRRecognitionInitMessage__storage_ {
  uint32_t _has_storage_[1];
  ASRRecognitionParameters *parameters;
  NSMutableArray *resourcesArray;
  NSMutableDictionary *clientData;
  NSString *userId;
} ASRRecognitionInitMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "parameters",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRRecognitionParameters),
        .number = ASRRecognitionInitMessage_FieldNumber_Parameters,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ASRRecognitionInitMessage__storage_, parameters),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resourcesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRRecognitionResource),
        .number = ASRRecognitionInitMessage_FieldNumber_ResourcesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ASRRecognitionInitMessage__storage_, resourcesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clientData",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionInitMessage_FieldNumber_ClientData,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ASRRecognitionInitMessage__storage_, clientData),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userId",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionInitMessage_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ASRRecognitionInitMessage__storage_, userId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRRecognitionInitMessage class]
                                     rootClass:[ASRNuanceAsrRoot class]
                                          file:ASRNuanceAsrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRRecognitionInitMessage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ASRRecognitionParameters

@implementation ASRRecognitionParameters

@dynamic optionalSpeechDetectionSensitivityOneOfCase;
@dynamic language;
@dynamic topic;
@dynamic hasAudioFormat, audioFormat;
@dynamic utteranceDetectionMode;
@dynamic resultType;
@dynamic hasRecognitionFlags, recognitionFlags;
@dynamic noInputTimeoutMs;
@dynamic recognitionTimeoutMs;
@dynamic utteranceEndSilenceMs;
@dynamic speechDetectionSensitivity;
@dynamic maxHypotheses;
@dynamic speechDomain;
@dynamic hasFormatting, formatting;

typedef struct ASRRecognitionParameters__storage_ {
  uint32_t _has_storage_[2];
  ASREnumUtteranceDetectionMode utteranceDetectionMode;
  ASREnumResultType resultType;
  uint32_t noInputTimeoutMs;
  uint32_t recognitionTimeoutMs;
  uint32_t utteranceEndSilenceMs;
  float speechDetectionSensitivity;
  uint32_t maxHypotheses;
  NSString *language;
  NSString *topic;
  ASRAudioFormat *audioFormat;
  ASRRecognitionFlags *recognitionFlags;
  NSString *speechDomain;
  ASRFormatting *formatting;
} ASRRecognitionParameters__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "language",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionParameters_FieldNumber_Language,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ASRRecognitionParameters__storage_, language),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "topic",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionParameters_FieldNumber_Topic,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ASRRecognitionParameters__storage_, topic),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audioFormat",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRAudioFormat),
        .number = ASRRecognitionParameters_FieldNumber_AudioFormat,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ASRRecognitionParameters__storage_, audioFormat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "utteranceDetectionMode",
        .dataTypeSpecific.enumDescFunc = ASREnumUtteranceDetectionMode_EnumDescriptor,
        .number = ASRRecognitionParameters_FieldNumber_UtteranceDetectionMode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ASRRecognitionParameters__storage_, utteranceDetectionMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "resultType",
        .dataTypeSpecific.enumDescFunc = ASREnumResultType_EnumDescriptor,
        .number = ASRRecognitionParameters_FieldNumber_ResultType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ASRRecognitionParameters__storage_, resultType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "recognitionFlags",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRRecognitionFlags),
        .number = ASRRecognitionParameters_FieldNumber_RecognitionFlags,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ASRRecognitionParameters__storage_, recognitionFlags),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "noInputTimeoutMs",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionParameters_FieldNumber_NoInputTimeoutMs,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ASRRecognitionParameters__storage_, noInputTimeoutMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "recognitionTimeoutMs",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionParameters_FieldNumber_RecognitionTimeoutMs,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ASRRecognitionParameters__storage_, recognitionTimeoutMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "utteranceEndSilenceMs",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionParameters_FieldNumber_UtteranceEndSilenceMs,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ASRRecognitionParameters__storage_, utteranceEndSilenceMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "speechDetectionSensitivity",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionParameters_FieldNumber_SpeechDetectionSensitivity,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ASRRecognitionParameters__storage_, speechDetectionSensitivity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "maxHypotheses",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionParameters_FieldNumber_MaxHypotheses,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ASRRecognitionParameters__storage_, maxHypotheses),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "speechDomain",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionParameters_FieldNumber_SpeechDomain,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ASRRecognitionParameters__storage_, speechDomain),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "formatting",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRFormatting),
        .number = ASRRecognitionParameters_FieldNumber_Formatting,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ASRRecognitionParameters__storage_, formatting),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRRecognitionParameters class]
                                     rootClass:[ASRNuanceAsrRoot class]
                                          file:ASRNuanceAsrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRRecognitionParameters__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "optionalSpeechDetectionSensitivity",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ASRRecognitionParameters_UtteranceDetectionMode_RawValue(ASRRecognitionParameters *message) {
  GPBDescriptor *descriptor = [ASRRecognitionParameters descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ASRRecognitionParameters_FieldNumber_UtteranceDetectionMode];
  return GPBGetMessageRawEnumField(message, field);
}

void SetASRRecognitionParameters_UtteranceDetectionMode_RawValue(ASRRecognitionParameters *message, int32_t value) {
  GPBDescriptor *descriptor = [ASRRecognitionParameters descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ASRRecognitionParameters_FieldNumber_UtteranceDetectionMode];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t ASRRecognitionParameters_ResultType_RawValue(ASRRecognitionParameters *message) {
  GPBDescriptor *descriptor = [ASRRecognitionParameters descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ASRRecognitionParameters_FieldNumber_ResultType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetASRRecognitionParameters_ResultType_RawValue(ASRRecognitionParameters *message, int32_t value) {
  GPBDescriptor *descriptor = [ASRRecognitionParameters descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ASRRecognitionParameters_FieldNumber_ResultType];
  GPBSetMessageRawEnumField(message, field, value);
}

void ASRRecognitionParameters_ClearOptionalSpeechDetectionSensitivityOneOfCase(ASRRecognitionParameters *message) {
  GPBDescriptor *descriptor = [ASRRecognitionParameters descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - ASRAudioFormat

@implementation ASRAudioFormat

@dynamic audioFormatUnionOneOfCase;
@dynamic pcm;
@dynamic alaw;
@dynamic ulaw;
@dynamic opus;
@dynamic oggOpus;

typedef struct ASRAudioFormat__storage_ {
  uint32_t _has_storage_[2];
  ASRPCM *pcm;
  ASRALaw *alaw;
  ASRULaw *ulaw;
  ASROpus *opus;
  ASROggOpus *oggOpus;
} ASRAudioFormat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pcm",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRPCM),
        .number = ASRAudioFormat_FieldNumber_Pcm,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ASRAudioFormat__storage_, pcm),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "alaw",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRALaw),
        .number = ASRAudioFormat_FieldNumber_Alaw,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ASRAudioFormat__storage_, alaw),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ulaw",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRULaw),
        .number = ASRAudioFormat_FieldNumber_Ulaw,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ASRAudioFormat__storage_, ulaw),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opus",
        .dataTypeSpecific.clazz = GPBObjCClass(ASROpus),
        .number = ASRAudioFormat_FieldNumber_Opus,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ASRAudioFormat__storage_, opus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "oggOpus",
        .dataTypeSpecific.clazz = GPBObjCClass(ASROggOpus),
        .number = ASRAudioFormat_FieldNumber_OggOpus,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ASRAudioFormat__storage_, oggOpus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRAudioFormat class]
                                     rootClass:[ASRNuanceAsrRoot class]
                                          file:ASRNuanceAsrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRAudioFormat__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "audioFormatUnion",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ASRAudioFormat_ClearAudioFormatUnionOneOfCase(ASRAudioFormat *message) {
  GPBDescriptor *descriptor = [ASRAudioFormat descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - ASRPCM

@implementation ASRPCM

@dynamic sampleRateHz;

typedef struct ASRPCM__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sampleRateHz;
} ASRPCM__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sampleRateHz",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRPCM_FieldNumber_SampleRateHz,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ASRPCM__storage_, sampleRateHz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRPCM class]
                                     rootClass:[ASRNuanceAsrRoot class]
                                          file:ASRNuanceAsrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRPCM__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ASRALaw

@implementation ASRALaw


typedef struct ASRALaw__storage_ {
  uint32_t _has_storage_[1];
} ASRALaw__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRALaw class]
                                     rootClass:[ASRNuanceAsrRoot class]
                                          file:ASRNuanceAsrRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(ASRALaw__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ASRULaw

@implementation ASRULaw


typedef struct ASRULaw__storage_ {
  uint32_t _has_storage_[1];
} ASRULaw__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRULaw class]
                                     rootClass:[ASRNuanceAsrRoot class]
                                          file:ASRNuanceAsrRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(ASRULaw__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ASROpus

@implementation ASROpus

@dynamic decodeRateHz;
@dynamic preskipSamples;
@dynamic sourceRateHz;

typedef struct ASROpus__storage_ {
  uint32_t _has_storage_[1];
  uint32_t decodeRateHz;
  uint32_t preskipSamples;
  uint32_t sourceRateHz;
} ASROpus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "decodeRateHz",
        .dataTypeSpecific.clazz = Nil,
        .number = ASROpus_FieldNumber_DecodeRateHz,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ASROpus__storage_, decodeRateHz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "preskipSamples",
        .dataTypeSpecific.clazz = Nil,
        .number = ASROpus_FieldNumber_PreskipSamples,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ASROpus__storage_, preskipSamples),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sourceRateHz",
        .dataTypeSpecific.clazz = Nil,
        .number = ASROpus_FieldNumber_SourceRateHz,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ASROpus__storage_, sourceRateHz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASROpus class]
                                     rootClass:[ASRNuanceAsrRoot class]
                                          file:ASRNuanceAsrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASROpus__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ASROggOpus

@implementation ASROggOpus

@dynamic decodeRateHz;

typedef struct ASROggOpus__storage_ {
  uint32_t _has_storage_[1];
  uint32_t decodeRateHz;
} ASROggOpus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "decodeRateHz",
        .dataTypeSpecific.clazz = Nil,
        .number = ASROggOpus_FieldNumber_DecodeRateHz,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ASROggOpus__storage_, decodeRateHz),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASROggOpus class]
                                     rootClass:[ASRNuanceAsrRoot class]
                                          file:ASRNuanceAsrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASROggOpus__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ASRRecognitionFlags

@implementation ASRRecognitionFlags

@dynamic autoPunctuate;
@dynamic filterProfanity;
@dynamic includeTokenization;
@dynamic stallTimers;
@dynamic discardSpeakerAdaptation;
@dynamic suppressCallRecording;
@dynamic maskLoadFailures;
@dynamic suppressInitialCapitalization;
@dynamic allowZeroBaseLmWeight;
@dynamic filterWakeupWord;

typedef struct ASRRecognitionFlags__storage_ {
  uint32_t _has_storage_[1];
} ASRRecognitionFlags__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "autoPunctuate",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionFlags_FieldNumber_AutoPunctuate,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "filterProfanity",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionFlags_FieldNumber_FilterProfanity,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "includeTokenization",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionFlags_FieldNumber_IncludeTokenization,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "stallTimers",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionFlags_FieldNumber_StallTimers,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "discardSpeakerAdaptation",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionFlags_FieldNumber_DiscardSpeakerAdaptation,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "suppressCallRecording",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionFlags_FieldNumber_SuppressCallRecording,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "maskLoadFailures",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionFlags_FieldNumber_MaskLoadFailures,
        .hasIndex = 12,
        .offset = 13,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "suppressInitialCapitalization",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionFlags_FieldNumber_SuppressInitialCapitalization,
        .hasIndex = 14,
        .offset = 15,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "allowZeroBaseLmWeight",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionFlags_FieldNumber_AllowZeroBaseLmWeight,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "filterWakeupWord",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRRecognitionFlags_FieldNumber_FilterWakeupWord,
        .hasIndex = 18,
        .offset = 19,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRRecognitionFlags class]
                                     rootClass:[ASRNuanceAsrRoot class]
                                          file:ASRNuanceAsrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRRecognitionFlags__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ASRFormatting

@implementation ASRFormatting

@dynamic scheme;
@dynamic options, options_Count;

typedef struct ASRFormatting__storage_ {
  uint32_t _has_storage_[1];
  NSString *scheme;
  GPBStringBoolDictionary *options;
} ASRFormatting__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "scheme",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRFormatting_FieldNumber_Scheme,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ASRFormatting__storage_, scheme),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "options",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRFormatting_FieldNumber_Options,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ASRFormatting__storage_, options),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRFormatting class]
                                     rootClass:[ASRNuanceAsrRoot class]
                                          file:ASRNuanceAsrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRFormatting__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ASRControlMessage

@implementation ASRControlMessage

@dynamic controlMessageUnionOneOfCase;
@dynamic startTimersMessage;

typedef struct ASRControlMessage__storage_ {
  uint32_t _has_storage_[2];
  ASRStartTimersControlMessage *startTimersMessage;
} ASRControlMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "startTimersMessage",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRStartTimersControlMessage),
        .number = ASRControlMessage_FieldNumber_StartTimersMessage,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ASRControlMessage__storage_, startTimersMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRControlMessage class]
                                     rootClass:[ASRNuanceAsrRoot class]
                                          file:ASRNuanceAsrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRControlMessage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "controlMessageUnion",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ASRControlMessage_ClearControlMessageUnionOneOfCase(ASRControlMessage *message) {
  GPBDescriptor *descriptor = [ASRControlMessage descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - ASRStartTimersControlMessage

@implementation ASRStartTimersControlMessage


typedef struct ASRStartTimersControlMessage__storage_ {
  uint32_t _has_storage_[1];
} ASRStartTimersControlMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRStartTimersControlMessage class]
                                     rootClass:[ASRNuanceAsrRoot class]
                                          file:ASRNuanceAsrRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(ASRStartTimersControlMessage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ASRRecognitionResponse

@implementation ASRRecognitionResponse

@dynamic responseUnionOneOfCase;
@dynamic status;
@dynamic startOfSpeech;
@dynamic result;

typedef struct ASRRecognitionResponse__storage_ {
  uint32_t _has_storage_[2];
  ASRStatus *status;
  ASRStartOfSpeech *startOfSpeech;
  ASRResult *result;
} ASRRecognitionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRStatus),
        .number = ASRRecognitionResponse_FieldNumber_Status,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ASRRecognitionResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "startOfSpeech",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRStartOfSpeech),
        .number = ASRRecognitionResponse_FieldNumber_StartOfSpeech,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ASRRecognitionResponse__storage_, startOfSpeech),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "result",
        .dataTypeSpecific.clazz = GPBObjCClass(ASRResult),
        .number = ASRRecognitionResponse_FieldNumber_Result,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ASRRecognitionResponse__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRRecognitionResponse class]
                                     rootClass:[ASRNuanceAsrRoot class]
                                          file:ASRNuanceAsrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRRecognitionResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "responseUnion",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ASRRecognitionResponse_ClearResponseUnionOneOfCase(ASRRecognitionResponse *message) {
  GPBDescriptor *descriptor = [ASRRecognitionResponse descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - ASRStatus

@implementation ASRStatus

@dynamic code;
@dynamic message;
@dynamic details;

typedef struct ASRStatus__storage_ {
  uint32_t _has_storage_[1];
  uint32_t code;
  NSString *message;
  NSString *details;
} ASRStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRStatus_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ASRStatus__storage_, code),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRStatus_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ASRStatus__storage_, message),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "details",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRStatus_FieldNumber_Details,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ASRStatus__storage_, details),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRStatus class]
                                     rootClass:[ASRNuanceAsrRoot class]
                                          file:ASRNuanceAsrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRStatus__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ASRStartOfSpeech

@implementation ASRStartOfSpeech

@dynamic firstAudioToStartOfSpeechMs;

typedef struct ASRStartOfSpeech__storage_ {
  uint32_t _has_storage_[1];
  uint32_t firstAudioToStartOfSpeechMs;
} ASRStartOfSpeech__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "firstAudioToStartOfSpeechMs",
        .dataTypeSpecific.clazz = Nil,
        .number = ASRStartOfSpeech_FieldNumber_FirstAudioToStartOfSpeechMs,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ASRStartOfSpeech__storage_, firstAudioToStartOfSpeechMs),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ASRStartOfSpeech class]
                                     rootClass:[ASRNuanceAsrRoot class]
                                          file:ASRNuanceAsrRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ASRStartOfSpeech__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
